package compil.inv.parser;

import java_cup.runtime.*;
import compil.inv.semantica.*;
import compil.inv.geracao.GeradorDeCodigo;

parser code {:

    GeradorDeCodigo ger = GeradorDeCodigo.getInstance();

    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */

terminal CONTEXT, INV,
        OR, XOR, AND, NOT, LT, GT, LE, GE, EQUAL, NEQUAL,
        PLUS, MINUS, MULT, DIVIDE, 
        SEMICOL, COLON, DCOLON, LPAREN, RPAREN, COMMA, RARROW, DOT, BAR,
	IF, THEN, ELSE, ENDIF, IMPLIES, SIZE, INCLUDES, EXCLUDES, FORALL, SELECT, EXISTS,
        RCOL,LCOL,INCLUDESALL;

terminal String ID, STRING, NUMERO, TRUE, FALSE;

non terminal No ExpressoesOcl, Restricao, DeclaracaoContexto,ClassifierContexto;
non terminal Operacao ExpOcl, InvContext, ExpPrimaria;
non terminal Literal Literal;
non terminal No ExpLogica, ExpRelacional;
non terminal No ExpAditiva, ExpMultiplicativa, ExpUnaria;
non terminal No ExpAditivaAux, ExpMultiAux, ExpPosFixada, ExpPosFixadaAux; 
non terminal Operador OperadorUnario, OperadorMais, OperadorMulti, OperadorRelacional, OperadorLogico;
non terminal No ChamadaPropriedade, ExpressaoIf, Caminho;
non terminal No ParametrosChamadaPropriedade, ParametrosChamadaPropriedadeOpt;
non terminal No ListaParametrosOpt, Declarador, ListaParametros, DeclaradorAux;
non terminal No EspecificadorTipoOpt, EspecificadorTipo, EspecificadorTipoSimples, CaminhoAux;
non terminal No OperadorColecao,Qualificadores,ChamadaPropriedadeColecao,QualificadoresOpt;

ExpressoesOcl ::= Restricao ExpressoesOcl {:System.out.println("casei");:}
				| ;

Restricao     ::= DeclaracaoContexto InvContext;

DeclaracaoContexto ::= CONTEXT ClassifierContexto; 

ClassifierContexto ::= ID | ID COLON ID | ID DCOLON ID ;

InvContext	::= INV COLON ExpOcl InvContext 
                    | 
                    INV ID COLON ExpOcl InvContext 
                    | ;

ExpOcl ::= ExpLogica;

ExpLogica ::= ExpRelacional
              |
              ExpRelacional OperadorLogico:o {: parser.ger.oprd(o); :} ExpLogica 
              ;

ExpRelacional ::= ExpAditiva
                |
                ExpAditiva OperadorRelacional:o {: parser.ger.oprd(o); :} ExpAditiva
                ;


ExpAditiva ::= ExpMultiplicativa ExpAditivaAux ;

ExpAditivaAux ::=  OperadorMais:o {: parser.ger.oprd(o); :} ExpMultiplicativa:e ExpAditivaAux {: parser.ger.operacao(o, op1, op2);:}
		|  ;

ExpMultiplicativa ::= ExpUnaria ExpMultiAux  ;


ExpMultiAux ::= OperadorMulti:o {: parser.ger.oprd(o); :} ExpUnaria ExpMultiAux
		|  ;

ExpUnaria ::= OperadorUnario:o {: parser.ger.oprd(o); :} ExpPosFixada
                | ExpPosFixada ;

ExpPosFixada ::= ExpPrimaria ExpPosFixadaAux {:  :};

ExpPosFixadaAux ::= DOT ChamadaPropriedade ExpPosFixadaAux
                    |
                    RARROW ChamadaPropriedadeColecao ExpPosFixadaAux
                    |
                    ; 

ExpPrimaria ::= Literal:l {: RESULT = Operacao(l); :}
		| ChamadaPropriedade
		| LPAREN  ExpOcl RPAREN
		| ExpressaoIf;

ExpressaoIf ::= IF ExpOcl THEN ExpOcl ELSE ExpOcl ENDIF;


ChamadaPropriedadeColecao ::= OperadorColecao ParametrosChamadaPropriedadeOpt ;
							  

ChamadaPropriedade ::= Caminho ParametrosChamadaPropriedadeOpt                                                                    
                       ;

ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade | ; 

ParametrosChamadaPropriedade ::= LPAREN  Declarador ExpOcl RPAREN 	 
                                | LPAREN ExpOcl RPAREN
                                | LPAREN RPAREN ;
 
ListaParametros ::= ExpOcl ListaParametrosOpt ;
ListaParametrosOpt ::= COMMA ExpOcl ListaParametrosOpt | ; 

Declarador ::= ID DeclaradorAux EspecificadorTipoOpt BAR  ;

EspecificadorTipoOpt ::= SEMICOL ID COLON EspecificadorTipo EQUAL ExpOcl 
                         |
                         COLON ID
                         |
                         ;

DeclaradorAux ::= COMMA ID DeclaradorAux | ;

EspecificadorTipo ::= EspecificadorTipoSimples ;

EspecificadorTipoSimples ::= Caminho ;

Caminho ::= ID CaminhoAux ;

CaminhoAux ::= DCOLON ID CaminhoAux  | ;

Literal ::= STRING:s {: RESULT = new Literal(s, Literal.STRING); :} 
            | NUMERO:n {: RESULT = new Literal(n, Literal.NUMERO); :} 
            | TRUE:t {: RESULT = new Literal(t, Literal.BOOLEANO); :}
            | FALSE:f {: RESULT = new Literal(f, Literal.BOOLEANO); :} ;


OperadorColecao ::= INCLUDESALL | SIZE | INCLUDES | EXCLUDES | EXISTS | SELECT | FORALL ;
OperadorMais ::= PLUS {: RESULT = new Operador(Operador.MAIS);:} 
                | MINUS {:RESULT = new Operador(Operador.MENOS);:};
OperadorMulti ::= MULT {:RESULT = new Operador(Operador.VEZES);:}
                | DIVIDE {:RESULT = new Operador(Operador.DIVIDIDO);:} ;
OperadorUnario ::= MINUS {:RESULT = new Operador(Operador.MENOSU);:} 
                | NOT {:RESULT = new Operador(Operador.NOT);:};
OperadorLogico ::= AND {:RESULT = new Operador(Operador.AND);:}
                | OR {:RESULT = new Operador(Operador.OR);:}
                | XOR {:RESULT = new Operador(Operador.XOR);:} 
                | IMPLIES {: RESULT = new Operador(Operador.IMPLIES);:} ;
OperadorRelacional ::= EQUAL {:RESULT = new Operador(Operador.IGUAL);:}
                | GT {:RESULT = new Operador(Operador.MAIORQ);:}
                | LT {:RESULT = new Operador(Operador.MENORQ);:}
                | GE {:RESULT = new Operador(Operador.MAIORIGUAL);:}
                | LE {:RESULT = new Operador(Operador.MENORIGUAL);:}
                | NEQUAL {:RESULT = new Operador(Operador.DIF);:} ;