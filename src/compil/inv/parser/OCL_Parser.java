
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 01 23:35:11 BRT 2011
//----------------------------------------------------

package compil.inv.parser;

import java_cup.runtime.*;
import compil.inv.semantica.*;
import compil.inv.geracao.GeradorDeCodigo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 01 23:35:11 BRT 2011
  */
public class OCL_Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public OCL_Parser() {super();}

  /** Constructor which sets the default scanner. */
  public OCL_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OCL_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\051\002\000\002\002\005\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\004\004" +
    "\000\002\005\003\000\002\005\005\000\002\005\005\000" +
    "\002\052\002\000\002\010\007\000\002\053\002\000\002" +
    "\010\010\000\002\010\002\000\002\006\003\000\002\012" +
    "\003\000\002\054\002\000\002\055\002\000\002\012\007" +
    "\000\002\013\003\000\002\056\002\000\002\057\002\000" +
    "\002\013\007\000\002\060\002\000\002\014\005\000\002" +
    "\061\002\000\002\062\002\000\002\017\007\000\002\017" +
    "\002\000\002\063\002\000\002\015\005\000\002\064\002" +
    "\000\002\065\002\000\002\020\007\000\002\020\002\000" +
    "\002\066\002\000\002\016\005\000\002\016\003\000\002" +
    "\021\004\000\002\022\005\000\002\022\005\000\002\022" +
    "\002\000\002\007\003\000\002\007\003\000\002\007\005" +
    "\000\002\007\003\000\002\031\011\000\002\047\004\000" +
    "\002\030\004\000\002\034\003\000\002\034\002\000\002" +
    "\033\006\000\002\033\005\000\002\033\004\000\002\037" +
    "\004\000\002\035\005\000\002\035\002\000\002\036\006" +
    "\000\002\041\010\000\002\041\004\000\002\041\002\000" +
    "\002\040\005\000\002\040\002\000\002\042\003\000\002" +
    "\043\003\000\002\032\004\000\002\044\005\000\002\044" +
    "\002\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\023\003" +
    "\000\002\023\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\006\002\ufffe\004\007\001\002\000\004\002" +
    "\214\001\002\000\010\002\ufff4\004\ufff4\005\021\001\002" +
    "\000\006\002\001\004\001\001\002\000\004\053\011\001" +
    "\002\000\010\002\ufffc\004\ufffc\005\ufffc\001\002\000\014" +
    "\002\ufffb\004\ufffb\005\ufffb\025\013\026\012\001\002\000" +
    "\004\053\015\001\002\000\004\053\014\001\002\000\010" +
    "\002\ufffa\004\ufffa\005\ufffa\001\002\000\010\002\ufff9\004" +
    "\ufff9\005\ufff9\001\002\000\006\002\ufffe\004\007\001\002" +
    "\000\004\002\000\001\002\000\006\002\ufffd\004\ufffd\001" +
    "\002\000\006\025\023\053\022\001\002\000\004\025\210" +
    "\001\002\000\024\011\027\021\047\027\034\035\033\053" +
    "\035\054\041\055\050\056\032\057\046\001\002\000\052" +
    "\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\030\uffea\034\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\001\002\000\020\027\uffde\035\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\057\uffde\001\002\000\046\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\030\uffee\034\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\001\002\000\020\027\uffad" +
    "\035\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\001" +
    "\002\000\064\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\027\104\030\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\001\002\000\056\002\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\030\uffe4" +
    "\034\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002\000" +
    "\062\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\030\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\001\002\000" +
    "\024\011\027\021\047\027\034\035\033\053\035\054\041" +
    "\055\050\056\032\057\046\001\002\000\024\011\027\021" +
    "\047\027\034\035\033\053\035\054\041\055\050\056\032" +
    "\057\046\001\002\000\066\002\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026" +
    "\113\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\001\002\000\062\002\uffd6\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\001\002\000\062\002\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\030\uffd8\032\064\033\066\034\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\001\002\000\056\002\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\030\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\001\002\000\062\002\uffbd\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\030" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\001\002\000\032\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff1\007\ufff1\010\ufff1\030\ufff2\034\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff1\001\002\000\022\002\ufff3\004\ufff3\005" +
    "\ufff3\030\ufff3\034\ufff3\036\ufff3\037\ufff3\040\ufff3\001\002" +
    "\000\062\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\030\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\001\002" +
    "\000\010\002\ufff8\004\ufff8\005\ufff8\001\002\000\062\002" +
    "\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\012\uffba" +
    "\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\030\uffba\032\uffba\033\uffba\034\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\001\002\000\020\027" +
    "\uffae\035\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\001\002\000\062\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\030\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\001\002\000\062\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\030\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\001\002\000\010\002\ufff4\004\ufff4\005\021\001\002\000" +
    "\006\002\ufff7\004\ufff7\001\002\000\012\006\060\007\061" +
    "\010\057\041\056\001\002\000\024\011\ufff0\021\ufff0\027" +
    "\ufff0\035\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\001\002\000\024\011\uffa9\021\uffa9\027\uffa9\035\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\001\002\000\024" +
    "\011\uffac\021\uffac\027\uffac\035\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\001\002\000\024\011\uffab\021\uffab" +
    "\027\uffab\035\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\001\002\000\024\011\uffaa\021\uffaa\027\uffaa\035\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\001\002\000" +
    "\024\011\027\021\047\027\034\035\033\053\035\054\041" +
    "\055\050\056\032\057\046\001\002\000\022\002\uffef\004" +
    "\uffef\005\uffef\030\uffef\034\uffef\036\uffef\037\uffef\040\uffef" +
    "\001\002\000\020\042\101\043\073\044\074\045\075\046" +
    "\100\047\076\052\071\001\002\000\056\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\030\uffdb\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\001\002\000\004\053\035\001\002\000\062\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\030\uffd8\032\064\033\066\034\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002\000\056\002\uffda" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\030\uffda\034\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\001\002\000\064\002\uffb9\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\001\002\000\062\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\030\uffd8\032\064\033\066\034\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\001\002\000\064\002\uffb7\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\027\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\001\002\000\064\002\uffb6" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\001\002\000\064" +
    "\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\027\uffb3\030\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\001\002" +
    "\000\064\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\027\uffb5\030\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\001\002\000\064\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\027\104\030" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\001\002\000\064\002\uffb4\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\027" +
    "\uffb4\030\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\001\002\000\064\002\uffb8\004\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\001\002\000\062\002\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\030\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\001\002\000\062\002\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\001\002\000\026\011\027\021" +
    "\047\027\034\030\105\035\033\053\107\054\041\055\050" +
    "\056\032\057\046\001\002\000\062\002\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\001\002\000\024\011\027\021\047\027" +
    "\034\035\033\053\035\054\041\055\050\056\032\057\046" +
    "\001\002\000\060\006\uffbe\007\uffbe\010\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffc3\025\uffc3\026\113\027\uffbe\030" +
    "\uffbe\031\112\032\uffbe\033\uffbe\034\uffc3\041\uffbe\001\002" +
    "\000\004\030\111\001\002\000\062\002\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\001\002\000\004\053\134\001\002\000" +
    "\004\053\132\001\002\000\064\002\uffc0\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\027\uffc0\030\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\001\002\000\010\024\116\025\117" +
    "\034\uffc5\001\002\000\004\053\123\001\002\000\004\053" +
    "\122\001\002\000\004\034\121\001\002\000\024\011\uffc8" +
    "\021\uffc8\027\uffc8\035\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\001\002\000\004\034\uffc6\001\002\000\004" +
    "\025\124\001\002\000\004\053\035\001\002\000\004\016" +
    "\uffc1\001\002\000\004\016\uffc2\001\002\000\004\016\130" +
    "\001\002\000\024\011\027\021\047\027\034\035\033\053" +
    "\035\054\041\055\050\056\032\057\046\001\002\000\004" +
    "\034\uffc7\001\002\000\066\002\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026" +
    "\113\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\001\002\000\064\002\uffbf\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002\000\012\024" +
    "\uffc3\025\uffc3\031\112\034\uffc3\001\002\000\010\024\uffc4" +
    "\025\uffc4\034\uffc4\001\002\000\004\030\137\001\002\000" +
    "\062\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\030\uffce\032\uffce\033\uffce" +
    "\034\uffce\036\uffce\037\uffce\040\uffce\041\uffce\001\002\000" +
    "\056\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\030\uffd9\034\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\001\002\000\004\030\142\001" +
    "\002\000\062\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\030\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\001" +
    "\002\000\004\036\144\001\002\000\024\011\027\021\047" +
    "\027\034\035\033\053\035\054\041\055\050\056\032\057" +
    "\046\001\002\000\004\037\146\001\002\000\024\011\027" +
    "\021\047\027\034\035\033\053\035\054\041\055\050\056" +
    "\032\057\046\001\002\000\004\040\150\001\002\000\062" +
    "\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\030\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\001\002\000\056" +
    "\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\152\023\154\030\uffdf\034\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\001\002\000\024\011\uffb0\021\uffb0" +
    "\027\uffb0\035\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\001\002\000\024\011\uffe2\021\uffe2\027\uffe2\035\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\001\002\000" +
    "\024\011\uffaf\021\uffaf\027\uffaf\035\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\001\002\000\052\002\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\030" +
    "\uffe3\034\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\001\002" +
    "\000\024\011\027\021\047\027\034\035\033\053\035\054" +
    "\041\055\050\056\032\057\046\001\002\000\056\002\uffe1" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\030\uffe1\034\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\001\002\000\056\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\152\023\154" +
    "\030\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\001" +
    "\002\000\052\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\030\uffe0\034\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\001\002\000\062\002\uffd1\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\001\002\000\016\012\164\013\166\014" +
    "\170\015\172\016\167\017\171\001\002\000\024\011\uffa6" +
    "\021\uffa6\027\uffa6\035\uffa6\053\uffa6\054\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\001\002\000\024\011\uffec\021\uffec\027\uffec" +
    "\035\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\001" +
    "\002\000\024\011\uffa7\021\uffa7\027\uffa7\035\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\057\uffa7\001\002\000\024\011" +
    "\uffa8\021\uffa8\027\uffa8\035\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\001\002\000\024\011\uffa4\021\uffa4\027" +
    "\uffa4\035\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\001\002\000\024\011\uffa3\021\uffa3\027\uffa3\035\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002\000\024" +
    "\011\uffa5\021\uffa5\027\uffa5\035\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\001\002\000\024\011\027\021\047" +
    "\027\034\035\033\053\035\054\041\055\050\056\032\057" +
    "\046\001\002\000\032\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\030\uffeb\034\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\001\002\000\020\027\034\035\033\053\035" +
    "\054\041\055\050\056\032\057\046\001\002\000\056\002" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\030\uffdd\034\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\001\002\000\052\002\uffe5\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\201\021\202\030\uffe5\034" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\001\002\000\046" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\030\uffe9" +
    "\034\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\001\002\000" +
    "\024\011\uffb2\021\uffb2\027\uffb2\035\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\001\002\000\024\011\uffb1\021" +
    "\uffb1\027\uffb1\035\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\001\002\000\024\011\uffe8\021\uffe8\027\uffe8\035" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\001\002" +
    "\000\024\011\027\021\047\027\034\035\033\053\035\054" +
    "\041\055\050\056\032\057\046\001\002\000\052\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\030\uffe7\034\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\001" +
    "\002\000\052\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\201\021\202\030\uffe5\034\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\001\002\000\046\002\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\030\uffe6\034\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\001\002\000\024\011\027\021\047" +
    "\027\034\035\033\053\035\054\041\055\050\056\032\057" +
    "\046\001\002\000\010\002\ufff6\004\ufff6\005\ufff6\001\002" +
    "\000\010\002\ufff4\004\ufff4\005\021\001\002\000\006\002" +
    "\ufff5\004\ufff5\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\004\010\017\001\001\000\004\051\015" +
    "\001\001\000\004\005\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\016\003\005\004" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\044\007\036\011" +
    "\050\012\042\013\041\014\025\015\023\016\030\021\037" +
    "\023\024\030\035\031\043\032\027\001\001\000\004\060" +
    "\176\001\001\000\004\066\174\001\001\000\004\056\162" +
    "\001\001\000\002\001\001\000\006\033\102\034\161\001" +
    "\001\000\004\063\150\001\001\000\002\001\001\000\034" +
    "\006\142\007\036\011\050\012\042\013\041\014\025\015" +
    "\023\016\030\021\037\023\024\030\035\031\043\032\027" +
    "\001\001\000\034\006\140\007\036\011\050\012\042\013" +
    "\041\014\025\015\023\016\030\021\037\023\024\030\035" +
    "\031\043\032\027\001\001\000\004\044\113\001\001\000" +
    "\002\001\001\000\004\022\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\052\001\001\000\002\001\001\000\004" +
    "\027\054\001\001\000\004\055\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\036\011\050\012\062\013\041\014\025\015" +
    "\023\016\030\021\037\023\024\030\035\031\043\032\027" +
    "\001\001\000\002\001\001\000\006\045\076\047\071\001" +
    "\001\000\002\001\001\000\006\030\066\032\027\001\001" +
    "\000\004\022\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\102\034\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\107\007" +
    "\036\011\050\012\042\013\041\014\025\015\023\016\030" +
    "\021\037\023\024\030\035\031\043\032\027\036\105\001" +
    "\001\000\002\001\001\000\034\006\135\007\036\011\050" +
    "\012\042\013\041\014\025\015\023\016\030\021\037\023" +
    "\024\030\035\031\043\032\027\001\001\000\006\040\114" +
    "\044\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\124\042\126\043\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\130\007\036\011\050\012\042\013\041\014\025\015" +
    "\023\016\030\021\037\023\024\030\035\031\043\032\027" +
    "\001\001\000\002\001\001\000\004\044\132\001\001\000" +
    "\002\001\001\000\004\040\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\144\007\036\011\050\012\042\013\041\014\025\015" +
    "\023\016\030\021\037\023\024\030\035\031\043\032\027" +
    "\001\001\000\002\001\001\000\034\006\146\007\036\011" +
    "\050\012\042\013\041\014\025\015\023\016\030\021\037" +
    "\023\024\030\035\031\043\032\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\154\025\152\001\001" +
    "\000\002\001\001\000\004\064\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\036\011\050\016\156" +
    "\021\037\023\024\030\035\031\043\032\027\001\001\000" +
    "\004\065\157\001\001\000\006\020\160\025\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\164\001" +
    "\001\000\002\001\001\000\004\057\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\007\036\011\050\014\173" +
    "\015\023\016\030\021\037\023\024\030\035\031\043\032" +
    "\027\001\001\000\002\001\001\000\016\007\036\011\050" +
    "\021\175\030\035\031\043\032\027\001\001\000\002\001" +
    "\001\000\006\017\177\024\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\203\001" +
    "\001\000\024\007\036\011\050\015\204\016\030\021\037" +
    "\023\024\030\035\031\043\032\027\001\001\000\004\062" +
    "\205\001\001\000\006\017\206\024\202\001\001\000\002" +
    "\001\001\000\034\006\210\007\036\011\050\012\042\013" +
    "\041\014\025\015\023\016\030\021\037\023\024\030\035" +
    "\031\043\032\027\001\001\000\004\053\211\001\001\000" +
    "\004\010\212\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OCL_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OCL_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OCL_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    GeradorDeCodigo ger = GeradorDeCodigo.getInstance();

    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$OCL_Parser$actions {
  private final OCL_Parser parser;

  /** Constructor */
  CUP$OCL_Parser$actions(OCL_Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$OCL_Parser$do_action(
    int                        CUP$OCL_Parser$act_num,
    java_cup.runtime.lr_parser CUP$OCL_Parser$parser,
    java.util.Stack            CUP$OCL_Parser$stack,
    int                        CUP$OCL_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OCL_Parser$result;

      /* select the action based on the action number */
      switch (CUP$OCL_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OperadorRelacional ::= NEQUAL 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.DIF);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OperadorRelacional ::= LE 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENORIGUAL);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OperadorRelacional ::= GE 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MAIORIGUAL);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OperadorRelacional ::= LT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENORQ);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OperadorRelacional ::= GT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MAIORQ);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OperadorRelacional ::= EQUAL 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.IGUAL);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OperadorLogico ::= IMPLIES 
            {
              Operador RESULT =null;
		 RESULT = new Operador(Operador.IMPLIES);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OperadorLogico ::= XOR 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.XOR);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OperadorLogico ::= OR 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.OR);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OperadorLogico ::= AND 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.AND);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OperadorUnario ::= NOT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.NOT);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",17, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OperadorUnario ::= MINUS 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENOSU);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",17, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OperadorMulti ::= DIVIDE 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.DIVIDIDO);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",19, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadorMulti ::= MULT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.VEZES);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",19, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OperadorMais ::= MINUS 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENOS);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMais",18, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadorMais ::= PLUS 
            {
              Operador RESULT =null;
		 RESULT = new Operador(Operador.MAIS);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMais",18, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OperadorColecao ::= FORALL 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadorColecao ::= SELECT 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadorColecao ::= EXISTS 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperadorColecao ::= EXCLUDES 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OperadorColecao ::= INCLUDES 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OperadorColecao ::= SIZE 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OperadorColecao ::= INCLUDESALL 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Literal ::= FALSE 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(f, Literal.BOOLEANO); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Literal ::= TRUE 
            {
              Literal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(t, Literal.BOOLEANO); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Literal ::= NUMERO 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(n, Literal.NUMERO); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Literal ::= STRING 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(s, Literal.STRING); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CaminhoAux ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",34, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CaminhoAux ::= DCOLON ID CaminhoAux 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",34, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Caminho ::= ID CaminhoAux 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Caminho",24, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EspecificadorTipoSimples ::= Caminho 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoSimples",33, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EspecificadorTipo ::= EspecificadorTipoSimples 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipo",32, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DeclaradorAux ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",30, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DeclaradorAux ::= COMMA ID DeclaradorAux 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",30, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EspecificadorTipoOpt ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EspecificadorTipoOpt ::= COLON ID 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EspecificadorTipoOpt ::= SEMICOL ID COLON EspecificadorTipo EQUAL ExpOcl 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Declarador ::= ID DeclaradorAux EspecificadorTipoOpt BAR 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Declarador",28, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListaParametrosOpt ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ListaParametrosOpt",27, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListaParametrosOpt ::= COMMA ExpOcl ListaParametrosOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ListaParametrosOpt",27, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListaParametros ::= ExpOcl ListaParametrosOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",29, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ParametrosChamadaPropriedade ::= LPAREN RPAREN 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ParametrosChamadaPropriedade ::= LPAREN ExpOcl RPAREN 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ParametrosChamadaPropriedade ::= LPAREN Declarador ExpOcl RPAREN 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ParametrosChamadaPropriedadeOpt ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",26, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",26, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ChamadaPropriedade ::= Caminho ParametrosChamadaPropriedadeOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedade",22, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ChamadaPropriedadeColecao ::= OperadorColecao ParametrosChamadaPropriedadeOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedadeColecao",37, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpressaoIf ::= IF ExpOcl THEN ExpOcl ELSE ExpOcl ENDIF 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressaoIf",23, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpPrimaria ::= ExpressaoIf 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpPrimaria ::= LPAREN ExpOcl RPAREN 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpPrimaria ::= ChamadaPropriedade 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpPrimaria ::= Literal 
            {
              Expressao RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(l); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpPosFixadaAux ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpPosFixadaAux ::= RARROW ChamadaPropriedadeColecao ExpPosFixadaAux 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ExpPosFixadaAux ::= DOT ChamadaPropriedade ExpPosFixadaAux 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpPosFixada ::= ExpPrimaria ExpPosFixadaAux 
            {
              Expressao RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Expressao ep = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int epfleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int epfright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao epf = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(ep, epf); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixada",15, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpUnaria ::= ExpPosFixada 
            {
              Expressao RESULT =null;
		int epfleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int epfright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao epf = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(epf); RESULT = new Expressao(epf); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",12, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpUnaria ::= OperadorUnario NT$13 ExpPosFixada 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int epfleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int epfright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao epf = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(epf); RESULT = new Expressao(o, epf); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",12, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$13 ::= 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpMultiAux ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",14, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExpMultiAux ::= OperadorMulti NT$11 ExpUnaria NT$12 ExpMultiAux 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(e2); RESULT = new Expressao(o, e1, e2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",14, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$12 ::= 
            {
              Expressao RESULT =(Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(e1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$11 ::= 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExpMultiplicativa ::= ExpUnaria NT$10 ExpMultiAux 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int eunleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int eunright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao eun = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int eauxleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eauxright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao eaux = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(eaux); RESULT = new Expressao(eun, eaux); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",11, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$10 ::= 
            {
              Expressao RESULT =null;
		int eunleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eunright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao eun = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(eun); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExpAditivaAux ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",13, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExpAditivaAux ::= OperadorMais NT$8 ExpMultiplicativa NT$9 ExpAditivaAux 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao op1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao op2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(op2); RESULT = new Expressao(o, op1, op2);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",13, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$9 ::= 
            {
              Expressao RESULT =(Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao op1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(op1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$8 ::= 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExpAditiva ::= ExpMultiplicativa NT$7 ExpAditivaAux 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int emulleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int emulright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao emul = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int eauxleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eauxright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao eaux = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(eaux); RESULT = new Expressao(emul, eaux); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",10, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$7 ::= 
            {
              Expressao RESULT =null;
		int emulleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int emulright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao emul = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(emul); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ExpRelacional ::= ExpAditiva NT$5 OperadorRelacional NT$6 ExpAditiva 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		Expressao a1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao a2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(a1); RESULT = new Expressao(o, a1, a2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              Expressao RESULT =(Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao a1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$5 ::= 
            {
              Expressao RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao a1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(a1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExpRelacional ::= ExpAditiva 
            {
              Expressao RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao a = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(a); RESULT = new Expressao(a); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ExpLogica ::= ExpRelacional NT$3 OperadorLogico NT$4 ExpLogica 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		Expressao r1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao l1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(l1); RESULT = new Expressao(o, r1, l1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Expressao RESULT =(Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao r1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Expressao RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao r1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(r1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ExpLogica ::= ExpRelacional 
            {
              Expressao RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao r = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(r); RESULT = new Expressao(r); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExpOcl ::= ExpLogica 
            {
              Expressao RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(e); RESULT = new Expressao(e); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpOcl",4, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InvContext ::= 
            {
              Invariante RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // InvContext ::= INV ID COLON ExpOcl NT$2 InvContext 
            {
              Invariante RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Invariante) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Invariante i = (Invariante)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.invariante(i); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Invariante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 RESULT = new Invariante(e, id); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InvContext ::= INV COLON ExpOcl NT$1 InvContext 
            {
              Invariante RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Invariante) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Invariante i = (Invariante)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.invariante(i); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Invariante RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 RESULT = new Invariante(e); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassifierContexto ::= ID DCOLON ID 
            {
              Classe RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Classe(id1, id2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassifierContexto ::= ID COLON ID 
            {
              Classe RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Classe(id1, id2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassifierContexto ::= ID 
            {
              Classe RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Classe(id); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclaracaoContexto ::= CONTEXT ClassifierContexto 
            {
              Classe RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Classe c = (Classe)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.classe(c); RESULT = c;
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaracaoContexto",2, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Restricao ::= DeclaracaoContexto InvContext 
            {
              Restricao RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Classe c = (Classe)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Invariante i = (Invariante)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.invariante(i); RESULT = new Restricao(c); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Restricao",1, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ExpressoesOcl ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= ExpressoesOcl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		No start_val = (No)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		RESULT = start_val;
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OCL_Parser$parser.done_parsing();
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ExpressoesOcl ::= Restricao NT$0 ExpressoesOcl 
            {
              No RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (No) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Restricao r = (Restricao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		System.out.println("casei");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              No RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Restricao r = (Restricao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.restricao(r); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

