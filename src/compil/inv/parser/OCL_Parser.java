
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 25 22:19:49 BRT 2011
//----------------------------------------------------

package compil.inv.parser;

import java_cup.runtime.*;
import compil.inv.semantica.Exp;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 25 22:19:49 BRT 2011
  */
public class OCL_Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public OCL_Parser() {super();}

  /** Constructor which sets the default scanner. */
  public OCL_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OCL_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\004\004\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\051\002\000" +
    "\002\007\007\000\002\052\002\000\002\007\010\000\002" +
    "\007\002\000\002\006\003\000\002\012\003\000\002\012" +
    "\005\000\002\015\003\000\002\015\005\000\002\016\004" +
    "\000\002\023\005\000\002\023\002\000\002\017\004\000" +
    "\002\024\005\000\002\024\002\000\002\020\004\000\002" +
    "\020\003\000\002\026\004\000\002\027\005\000\002\053" +
    "\002\000\002\027\006\000\002\027\002\000\002\010\003" +
    "\000\002\010\003\000\002\010\005\000\002\010\003\000" +
    "\002\031\011\000\002\047\005\000\002\054\002\000\002" +
    "\030\006\000\002\046\005\000\002\050\003\000\002\050" +
    "\002\000\002\034\003\000\002\034\002\000\002\033\006" +
    "\000\002\033\005\000\002\033\004\000\002\037\004\000" +
    "\002\035\005\000\002\035\002\000\002\055\002\000\002" +
    "\036\007\000\002\041\010\000\002\041\004\000\002\041" +
    "\002\000\002\040\005\000\002\040\002\000\002\042\003" +
    "\000\002\043\003\000\002\032\004\000\002\044\005\000" +
    "\002\044\002\000\002\011\003\000\002\011\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\022\003\000\002\025\003\000\002\025\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\002\uffff\004\007\001\002\000\004\002" +
    "\210\001\002\000\010\002\ufff5\004\ufff5\005\020\001\002" +
    "\000\006\002\uffff\004\007\001\002\000\004\053\011\001" +
    "\002\000\010\002\ufffd\004\ufffd\005\ufffd\001\002\000\014" +
    "\002\ufffc\004\ufffc\005\ufffc\025\013\026\012\001\002\000" +
    "\004\053\015\001\002\000\004\053\014\001\002\000\010" +
    "\002\ufffb\004\ufffb\005\ufffb\001\002\000\010\002\ufffa\004" +
    "\ufffa\005\ufffa\001\002\000\004\002\001\001\002\000\006" +
    "\002\ufffe\004\ufffe\001\002\000\006\025\022\053\021\001" +
    "\002\000\004\025\204\001\002\000\020\011\026\021\044" +
    "\027\032\035\031\053\034\054\037\057\045\001\002\000" +
    "\056\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\030\uffed\031\uffed\034\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\050\uffed\001\002\000\014\027\032\035" +
    "\031\053\034\054\037\057\045\001\002\000\052\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\166\013" +
    "\170\014\172\015\174\016\171\017\173\030\ufff1\031\ufff1" +
    "\034\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\050\ufff1\001" +
    "\002\000\014\027\uffb5\035\uffb5\053\uffb5\054\uffb5\057\uffb5" +
    "\001\002\000\072\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\050\uffdc\051\uffdc\001\002\000\062\002" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\030\uffea\031\uffea\034\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\050\uffea\001\002\000\020\011" +
    "\026\021\044\027\032\035\031\053\034\054\037\057\045" +
    "\001\002\000\020\011\026\021\044\027\032\035\031\053" +
    "\034\054\037\057\045\001\002\000\066\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\050\uffe1\001\002\000\074" +
    "\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\026\117\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\050\uffc4\051\uffc4\001\002\000\066\002\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\050\uffe3\001\002\000" +
    "\062\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\030\uffe8\031\uffe8\034\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\050\uffe8\001\002\000" +
    "\066\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\050" +
    "\uffc3\001\002\000\036\002\ufff3\004\ufff3\005\ufff3\006\054" +
    "\007\055\010\053\030\ufff3\031\ufff3\034\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\052\050\ufff3\001\002\000\066\002\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\050\uffdf\001\002" +
    "\000\026\002\ufff4\004\ufff4\005\ufff4\030\ufff4\031\ufff4\034" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\050\ufff4\001\002\000\010" +
    "\002\ufff9\004\ufff9\005\ufff9\001\002\000\014\027\uffb6\035" +
    "\uffb6\053\uffb6\054\uffb6\057\uffb6\001\002\000\066\002\uffc2" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\050\uffc2\001\002" +
    "\000\066\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\050\uffe2\001\002\000\010\002\ufff5\004\ufff5\005\020\001" +
    "\002\000\006\002\ufff8\004\ufff8\001\002\000\020\011\026" +
    "\021\044\027\032\035\031\053\034\054\037\057\045\001" +
    "\002\000\020\011\uffb1\021\uffb1\027\uffb1\035\uffb1\053\uffb1" +
    "\054\uffb1\057\uffb1\001\002\000\020\011\uffb4\021\uffb4\027" +
    "\uffb4\035\uffb4\053\uffb4\054\uffb4\057\uffb4\001\002\000\020" +
    "\011\uffb3\021\uffb3\027\uffb3\035\uffb3\053\uffb3\054\uffb3\057" +
    "\uffb3\001\002\000\020\011\uffb2\021\uffb2\027\uffb2\035\uffb2" +
    "\053\uffb2\054\uffb2\057\uffb2\001\002\000\026\002\ufff2\004" +
    "\ufff2\005\ufff2\030\ufff2\031\ufff2\034\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\050\ufff2\001\002\000\066\002\uffe7\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\030\uffe7\031\uffe7\032\060\033\061\034\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\050\uffe7\001\002\000\020\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\052\uffe5" +
    "\001\002\000\004\053\034\001\002\000\066\002\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\050\uffe6\001\002\000" +
    "\020\042\074\043\066\044\067\045\070\046\073\047\071" +
    "\052\064\001\002\000\072\002\uffc1\004\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\050\uffc1\051\uffc1\001\002\000" +
    "\066\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\050" +
    "\uffe4\001\002\000\072\002\uffbf\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\050\uffbf\051\uffbf\001\002\000\072" +
    "\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\050\uffbe\051\uffbe\001\002\000\072\002\uffbb\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\050\uffbb\051\uffbb\001" +
    "\002\000\072\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\050\uffbd\051\uffbd\001\002\000\072\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\050\uffd8" +
    "\051\076\001\002\000\072\002\uffbc\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\050\uffbc\051\uffbc\001\002\000" +
    "\072\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\050\uffc0\051\uffc0\001\002\000\070\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\027\111\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\050\uffd6\001\002" +
    "\000\020\011\026\021\044\027\032\035\031\053\034\054" +
    "\037\057\045\001\002\000\070\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\050\uffd9\001\002\000\004" +
    "\050\106\001\002\000\006\031\102\050\uffd0\001\002\000" +
    "\020\011\026\021\044\027\032\035\031\053\034\054\037" +
    "\057\045\001\002\000\004\050\uffd2\001\002\000\006\031" +
    "\102\050\uffd0\001\002\000\004\050\uffd1\001\002\000\070" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\050\uffda\001\002\000\066\002\uffdd\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\050\uffdd\001\002\000\066\002\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\050\uffd7\001\002\000" +
    "\022\011\026\021\044\027\032\030\113\035\031\053\114" +
    "\054\037\057\045\001\002\000\020\011\026\021\044\027" +
    "\032\035\031\053\034\054\037\057\045\001\002\000\066" +
    "\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\050\uffd3" +
    "\001\002\000\062\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffcf\025\uffcf\026\117\027\uffc4\030" +
    "\uffc4\031\uffcf\032\uffc4\033\uffc4\034\uffcf\041\uffc4\051\uffc4" +
    "\001\002\000\004\030\116\001\002\000\066\002\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\050\uffd4\001\002\000" +
    "\004\053\142\001\002\000\072\002\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\050\uffc6\051\uffc6\001\002" +
    "\000\012\024\uffc9\025\uffc9\031\122\034\uffc9\001\002\000" +
    "\004\053\140\001\002\000\010\024\124\025\125\034\uffcb" +
    "\001\002\000\004\053\131\001\002\000\004\053\130\001" +
    "\002\000\004\034\127\001\002\000\020\011\uffce\021\uffce" +
    "\027\uffce\035\uffce\053\uffce\054\uffce\057\uffce\001\002\000" +
    "\004\034\uffcc\001\002\000\004\025\132\001\002\000\004" +
    "\053\034\001\002\000\004\016\uffc7\001\002\000\004\016" +
    "\uffc8\001\002\000\004\016\136\001\002\000\020\011\026" +
    "\021\044\027\032\035\031\053\034\054\037\057\045\001" +
    "\002\000\004\034\uffcd\001\002\000\012\024\uffc9\025\uffc9" +
    "\031\122\034\uffc9\001\002\000\010\024\uffca\025\uffca\034" +
    "\uffca\001\002\000\074\002\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026\117" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\050\uffc4\051\uffc4\001\002" +
    "\000\072\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\050\uffc5\051\uffc5\001\002\000\004\030\145\001" +
    "\002\000\066\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\050\uffd5\001\002\000\004\030\147\001\002\000\066" +
    "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\050\uffe0" +
    "\001\002\000\004\036\151\001\002\000\020\011\026\021" +
    "\044\027\032\035\031\053\034\054\037\057\045\001\002" +
    "\000\004\037\153\001\002\000\020\011\026\021\044\027" +
    "\032\035\031\053\034\054\037\057\045\001\002\000\004" +
    "\040\155\001\002\000\066\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\050\uffde\001\002\000\062\002\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\157\023\161\030\uffec\031\uffec\034\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\050\uffec\001\002\000\020\011\uffb8\021" +
    "\uffb8\027\uffb8\035\uffb8\053\uffb8\054\uffb8\057\uffb8\001\002" +
    "\000\020\011\026\021\044\027\032\035\031\053\034\054" +
    "\037\057\045\001\002\000\020\011\uffb7\021\uffb7\027\uffb7" +
    "\035\uffb7\053\uffb7\054\uffb7\057\uffb7\001\002\000\062\002" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\030\uffeb\031\uffeb\034\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\050\uffeb\001\002\000\072\002" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\050" +
    "\uffd8\051\076\001\002\000\070\002\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\027\111\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\050\uffd6\001\002\000\066" +
    "\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\050\uffdb" +
    "\001\002\000\020\011\uffae\021\uffae\027\uffae\035\uffae\053" +
    "\uffae\054\uffae\057\uffae\001\002\000\020\011\026\021\044" +
    "\027\032\035\031\053\034\054\037\057\045\001\002\000" +
    "\020\011\uffaf\021\uffaf\027\uffaf\035\uffaf\053\uffaf\054\uffaf" +
    "\057\uffaf\001\002\000\020\011\uffb0\021\uffb0\027\uffb0\035" +
    "\uffb0\053\uffb0\054\uffb0\057\uffb0\001\002\000\020\011\uffac" +
    "\021\uffac\027\uffac\035\uffac\053\uffac\054\uffac\057\uffac\001" +
    "\002\000\020\011\uffab\021\uffab\027\uffab\035\uffab\053\uffab" +
    "\054\uffab\057\uffab\001\002\000\020\011\uffad\021\uffad\027" +
    "\uffad\035\uffad\053\uffad\054\uffad\057\uffad\001\002\000\036" +
    "\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\030" +
    "\ufff0\031\ufff0\034\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\050\ufff0\001\002\000\062\002\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\030" +
    "\uffe9\031\uffe9\034\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\050\uffe9\001\002\000\056\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\200\021\201\030\uffef\031\uffef\034" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\050\uffef\001\002" +
    "\000\020\011\uffba\021\uffba\027\uffba\035\uffba\053\uffba\054" +
    "\uffba\057\uffba\001\002\000\020\011\uffb9\021\uffb9\027\uffb9" +
    "\035\uffb9\053\uffb9\054\uffb9\057\uffb9\001\002\000\020\011" +
    "\026\021\044\027\032\035\031\053\034\054\037\057\045" +
    "\001\002\000\056\002\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\030\uffee\031\uffee\034\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\050\uffee\001\002\000\020" +
    "\011\026\021\044\027\032\035\031\053\034\054\037\057" +
    "\045\001\002\000\010\002\ufff7\004\ufff7\005\ufff7\001\002" +
    "\000\010\002\ufff5\004\ufff5\005\020\001\002\000\006\002" +
    "\ufff6\004\ufff6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\004\007\016\001\001\000\010\002\015" +
    "\003\005\004\004\001\001\000\004\005\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\042\010\034\011\045\012\041\015\037\016" +
    "\024\017\022\020\027\025\023\026\035\030\032\031\040" +
    "\032\026\001\001\000\004\023\176\001\001\000\016\010" +
    "\034\011\045\026\175\030\032\031\040\032\026\001\001" +
    "\000\004\014\166\001\001\000\002\001\001\000\004\054" +
    "\162\001\001\000\004\024\155\001\001\000\034\006\147" +
    "\010\034\011\045\012\041\015\037\016\024\017\022\020" +
    "\027\025\023\026\035\030\032\031\040\032\026\001\001" +
    "\000\034\006\145\010\034\011\045\012\041\015\037\016" +
    "\024\017\022\020\027\025\023\026\035\030\032\031\040" +
    "\032\026\001\001\000\002\001\001\000\004\044\117\001" +
    "\001\000\004\027\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\047\001" +
    "\001\000\002\001\001\000\032\010\034\011\045\012\055" +
    "\015\037\016\024\017\022\020\027\025\023\026\035\030" +
    "\032\031\040\032\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\062\001\001\000\006" +
    "\030\061\032\026\001\001\000\002\001\001\000\006\045" +
    "\071\047\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\076\050\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\107\034\106\001" +
    "\001\000\036\006\100\010\034\011\045\012\041\015\037" +
    "\016\024\017\022\020\027\025\023\026\035\030\032\031" +
    "\040\032\026\037\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\102\001\001\000\034\006\103\010" +
    "\034\011\045\012\041\015\037\016\024\017\022\020\027" +
    "\025\023\026\035\030\032\031\040\032\026\001\001\000" +
    "\002\001\001\000\004\035\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\114\010\034\011\045\012\041\015\037\016\024" +
    "\017\022\020\027\025\023\026\035\030\032\031\040\032" +
    "\026\036\111\001\001\000\034\006\143\010\034\011\045" +
    "\012\041\015\037\016\024\017\022\020\027\025\023\026" +
    "\035\030\032\031\040\032\026\001\001\000\002\001\001" +
    "\000\006\044\117\055\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\122\001\001\000\002\001\001\000\004\041\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\132\042\134\043\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\136\010" +
    "\034\011\045\012\041\015\037\016\024\017\022\020\027" +
    "\025\023\026\035\030\032\031\040\032\026\001\001\000" +
    "\002\001\001\000\004\040\140\001\001\000\002\001\001" +
    "\000\004\044\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\151\010\034\011\045\012" +
    "\041\015\037\016\024\017\022\020\027\025\023\026\035" +
    "\030\032\031\040\032\026\001\001\000\002\001\001\000" +
    "\034\006\153\010\034\011\045\012\041\015\037\016\024" +
    "\017\022\020\027\025\023\026\035\030\032\031\040\032" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\157\001\001\000\002\001\001\000\022\010\034\011" +
    "\045\020\161\025\023\026\035\030\032\031\040\032\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\076\050\163\001\001\000\006\033\107\034\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\010\034\011" +
    "\045\016\174\017\022\020\027\025\023\026\035\030\032" +
    "\031\040\032\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\034" +
    "\011\045\017\202\020\027\025\023\026\035\030\032\031" +
    "\040\032\026\001\001\000\002\001\001\000\034\006\204" +
    "\010\034\011\045\012\041\015\037\016\024\017\022\020" +
    "\027\025\023\026\035\030\032\031\040\032\026\001\001" +
    "\000\004\052\205\001\001\000\004\007\206\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OCL_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OCL_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OCL_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$OCL_Parser$actions {
  private final OCL_Parser parser;

  /** Constructor */
  CUP$OCL_Parser$actions(OCL_Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$OCL_Parser$do_action(
    int                        CUP$OCL_Parser$act_num,
    java_cup.runtime.lr_parser CUP$OCL_Parser$parser,
    java.util.Stack            CUP$OCL_Parser$stack,
    int                        CUP$OCL_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OCL_Parser$result;

      /* select the action based on the action number */
      switch (CUP$OCL_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OperadorRelacional ::= NEQUAL 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OperadorRelacional ::= LE 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OperadorRelacional ::= GE 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OperadorRelacional ::= LT 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OperadorRelacional ::= GT 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadorRelacional ::= EQUAL 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OperadorLogico ::= IMPLIES 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadorLogico ::= XOR 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OperadorLogico ::= OR 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadorLogico ::= AND 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadorUnario ::= NOT 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",19, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperadorUnario ::= MINUS 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",19, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OperadorMulti ::= DIVIDE 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OperadorMulti ::= MULT 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OperadorMais ::= MINUS 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMais",15, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OperadorMais ::= PLUS 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMais",15, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OperadorColecao ::= FORALL 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OperadorColecao ::= SELECT 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OperadorColecao ::= EXISTS 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OperadorColecao ::= EXCLUDES 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OperadorColecao ::= INCLUDES 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OperadorColecao ::= SIZE 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OperadorColecao ::= INCLUDESALL 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Literal ::= NUMERO 
            {
              Exp RESULT =null;
		RESULT = new Exp("Numero");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Literal ::= STRING 
            {
              Exp RESULT =null;
		RESULT = new Exp("String");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CaminhoAux ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",34, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CaminhoAux ::= DCOLON ID CaminhoAux 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",34, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Caminho ::= ID CaminhoAux 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Caminho",24, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EspecificadorTipoSimples ::= Caminho 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoSimples",33, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EspecificadorTipo ::= EspecificadorTipoSimples 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipo",32, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DeclaradorAux ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",30, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DeclaradorAux ::= COMMA ID DeclaradorAux 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",30, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EspecificadorTipoOpt ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EspecificadorTipoOpt ::= COLON ID 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EspecificadorTipoOpt ::= SEMICOL ID COLON EspecificadorTipo EQUAL ExpOcl 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Declarador ::= ID NT$4 DeclaradorAux EspecificadorTipoOpt BAR 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)).value;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Declarador",28, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$4 ::= 
            {
              Exp RESULT =null;
System.out.println("ID");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListaParametrosOpt ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ListaParametrosOpt",27, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListaParametrosOpt ::= COMMA ExpOcl ListaParametrosOpt 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ListaParametrosOpt",27, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListaParametros ::= ExpOcl ListaParametrosOpt 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",29, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ParametrosChamadaPropriedade ::= LPAREN RPAREN 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParametrosChamadaPropriedade ::= LPAREN ExpOcl RPAREN 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParametrosChamadaPropriedade ::= LPAREN Declarador ExpOcl RPAREN 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ParametrosChamadaPropriedadeOpt ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",26, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",26, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // QualificadoresOpt ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("QualificadoresOpt",38, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // QualificadoresOpt ::= Qualificadores 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("QualificadoresOpt",38, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Qualificadores ::= LCOL ListaParametros RCOL 
            {
              Exp RESULT =null;
		System.out.println("Qualificadores");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Qualificadores",36, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ChamadaPropriedade ::= Caminho NT$3 QualificadoresOpt ParametrosChamadaPropriedadeOpt 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedade",22, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$3 ::= 
            {
              Exp RESULT =null;
System.out.println("Path");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ChamadaPropriedadeColecao ::= OperadorColecao QualificadoresOpt ParametrosChamadaPropriedadeOpt 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedadeColecao",37, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpressaoIf ::= IF ExpOcl THEN ExpOcl ELSE ExpOcl ENDIF 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		 RESULT = Exp.ifExpType(e1, e2, e3); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressaoIf",23, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpPrimaria ::= ExpressaoIf 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExpPrimaria ::= LPAREN ExpOcl RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		 RESULT = e; 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ExpPrimaria ::= ChamadaPropriedade 
            {
              Exp RESULT =null;
		 System.out.println("PropertyCall");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ExpPrimaria ::= Literal 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExpPosFixadaAux ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExpPosFixadaAux ::= ExpPosFixadaAux RARROW NT$2 ChamadaPropriedadeColecao 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		System.out.println("postfix->propertycollectioncall");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Exp RESULT =null;
System.out.println("postfix->");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExpPosFixadaAux ::= ExpPosFixadaAux DOT ChamadaPropriedade 
            {
              Exp RESULT =null;
		System.out.println("postfix.propertycall");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExpPosFixada ::= ExpPrimaria ExpPosFixadaAux 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = Exp.checkSameType(e1, e2, e1.type); System.out.println("Exp UNARIA");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixada",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExpUnaria ::= ExpPosFixada 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = e; System.out.println(" ExpressaoPostfix ");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",14, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExpUnaria ::= OperadorUnario ExpPosFixada 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = Exp.checkSameType(e1, e2, e1.type); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",14, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExpMultiAux ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",18, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ExpMultiAux ::= ExpMultiAux OperadorMulti ExpUnaria 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 Exp.checkType(e1, e2, "Number"); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",18, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExpMultiplicativa ::= ExpUnaria ExpMultiAux 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = Exp.checkSameType(e1, e2, e1.type); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",13, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ExpAditivaAux ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",17, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExpAditivaAux ::= ExpAditivaAux OperadorMais ExpMultiplicativa 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 Exp.checkType(e1, e2, "Number"); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",17, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ExpAditiva ::= ExpMultiplicativa ExpAditivaAux 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = Exp.checkSameType(e1, e2, e1.type);; 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",12, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ExpRelacional ::= ExpAditiva OperadorRelacional ExpAditiva 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = Exp.checkSameType(e1, e2, "Boolean"); System.out.println(" ExpAditiva < ExpAditiva ");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",11, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ExpRelacional ::= ExpAditiva 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = e; System.out.println(" ExpAditiva ");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",11, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ExpLogica ::= ExpRelacional OperadorLogico ExpLogica 
            {
              Exp RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Exp er = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp el = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = Exp.checkSameType(er, el, "Boolean"); System.out.println(" ExpressaoLogica ");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExpLogica ::= ExpRelacional 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = Exp.checkType(e, "Boolean"); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExpOcl ::= ExpLogica 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = Exp.checkType(e, "Boolean"); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpOcl",4, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // InvContext ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InvContext ::= INV ID COLON ExpOcl NT$1 InvContext 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Exp RESULT =null;
System.out.println(" invariante ");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InvContext ::= INV COLON ExpOcl NT$0 InvContext 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Exp RESULT =null;
System.out.println(" invariante ");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassifierContexto ::= ID DCOLON ID 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassifierContexto ::= ID COLON ID 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassifierContexto ::= ID 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclaracaoContexto ::= CONTEXT ClassifierContexto 
            {
              Exp RESULT =null;
		System.out.println(" DeclaracaoContexto ");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaracaoContexto",2, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Restricao ::= DeclaracaoContexto InvContext 
            {
              Exp RESULT =null;
		System.out.println(" Restricao ");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Restricao",1, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ExpressoesOcl ::= 
            {
              Exp RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ExpressoesOcl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		RESULT = start_val;
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OCL_Parser$parser.done_parsing();
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ExpressoesOcl ::= Restricao ExpressoesOcl 
            {
              Exp RESULT =null;
		System.out.println("casei");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

