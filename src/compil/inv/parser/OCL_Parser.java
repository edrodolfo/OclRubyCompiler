
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 29 14:55:51 BRT 2011
//----------------------------------------------------

package compil.inv.parser;

import java_cup.runtime.*;
import compil.inv.semantica.*;
import compil.inv.geracao.GeradorDeCodigo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 29 14:55:51 BRT 2011
  */
public class OCL_Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public OCL_Parser() {super();}

  /** Constructor which sets the default scanner. */
  public OCL_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OCL_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\004\004\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\007\006\000" +
    "\002\007\007\000\002\007\002\000\002\006\003\000\002" +
    "\012\003\000\002\051\002\000\002\052\002\000\002\012" +
    "\007\000\002\013\003\000\002\053\002\000\002\054\002" +
    "\000\002\013\007\000\002\055\002\000\002\014\005\000" +
    "\002\056\002\000\002\057\002\000\002\017\007\000\002" +
    "\017\002\000\002\060\002\000\002\015\005\000\002\061" +
    "\002\000\002\062\002\000\002\020\007\000\002\020\002" +
    "\000\002\063\002\000\002\016\005\000\002\016\003\000" +
    "\002\021\004\000\002\022\005\000\002\022\005\000\002" +
    "\022\002\000\002\010\003\000\002\010\003\000\002\010" +
    "\005\000\002\010\003\000\002\031\011\000\002\047\004" +
    "\000\002\030\004\000\002\034\003\000\002\034\002\000" +
    "\002\033\006\000\002\033\005\000\002\033\004\000\002" +
    "\037\004\000\002\035\005\000\002\035\002\000\002\036" +
    "\006\000\002\041\010\000\002\041\004\000\002\041\002" +
    "\000\002\040\005\000\002\040\002\000\002\042\003\000" +
    "\002\043\003\000\002\032\004\000\002\044\005\000\002" +
    "\044\002\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\023" +
    "\003\000\002\023\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\006\002\uffff\004\007\001\002\000\004\002" +
    "\211\001\002\000\010\002\ufff7\004\ufff7\005\020\001\002" +
    "\000\006\002\uffff\004\007\001\002\000\004\053\011\001" +
    "\002\000\010\002\ufffd\004\ufffd\005\ufffd\001\002\000\014" +
    "\002\ufffc\004\ufffc\005\ufffc\025\013\026\012\001\002\000" +
    "\004\053\015\001\002\000\004\053\014\001\002\000\010" +
    "\002\ufffb\004\ufffb\005\ufffb\001\002\000\010\002\ufffa\004" +
    "\ufffa\005\ufffa\001\002\000\004\002\001\001\002\000\006" +
    "\002\ufffe\004\ufffe\001\002\000\006\025\022\053\021\001" +
    "\002\000\004\025\206\001\002\000\024\011\026\021\046" +
    "\027\033\035\032\053\034\054\040\055\047\056\031\057" +
    "\045\001\002\000\052\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\030\uffed\034\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\001\002\000\020\027\uffe1\035" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002" +
    "\000\046\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\030\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\001" +
    "\002\000\020\027\uffb0\035\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\001\002\000\056\002\uffe7\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\030\uffe7\034\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\001\002\000\064\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\027\102\030" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\001\002\000\062\002\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\030" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\001\002\000\024\011\026\021\046\027\033\035" +
    "\032\053\034\054\040\055\047\056\031\057\045\001\002" +
    "\000\024\011\026\021\046\027\033\035\032\053\034\054" +
    "\040\055\047\056\031\057\045\001\002\000\066\002\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\026\111\027\uffc1\030\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\001\002" +
    "\000\062\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\030\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002" +
    "\000\062\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\030\uffdb\032\062\033" +
    "\064\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002" +
    "\000\056\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\030\uffdf\034\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\001\002\000\062\002\uffc0" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\030\uffc0\032\uffc0\033\uffc0\034\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\001\002\000\032\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff4\007\ufff4\010\ufff4\030\ufff5\034" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff4\001\002\000\062" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\030\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\001\002\000\022" +
    "\002\ufff6\004\ufff6\005\ufff6\030\ufff6\034\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\001\002\000\010\002\ufff7\004\ufff7\005\020" +
    "\001\002\000\062\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\030\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\001\002\000\020\027\uffb1\035\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\001\002\000\062\002\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\001\002\000\062\002\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\030\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\001\002\000\006\002\ufff9\004\ufff9" +
    "\001\002\000\012\006\056\007\057\010\055\041\054\001" +
    "\002\000\024\011\ufff3\021\ufff3\027\ufff3\035\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\001\002\000\024\011" +
    "\uffac\021\uffac\027\uffac\035\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\001\002\000\024\011\uffaf\021\uffaf\027" +
    "\uffaf\035\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\001\002\000\024\011\uffae\021\uffae\027\uffae\035\uffae\053" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\001\002\000\024" +
    "\011\uffad\021\uffad\027\uffad\035\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\001\002\000\024\011\026\021\046" +
    "\027\033\035\032\053\034\054\040\055\047\056\031\057" +
    "\045\001\002\000\022\002\ufff2\004\ufff2\005\ufff2\030\ufff2" +
    "\034\ufff2\036\ufff2\037\ufff2\040\ufff2\001\002\000\020\042" +
    "\077\043\071\044\072\045\073\046\076\047\074\052\067" +
    "\001\002\000\056\002\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\030\uffde\034" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\001\002\000\004" +
    "\053\034\001\002\000\062\002\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\030" +
    "\uffdb\032\062\033\064\034\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\001\002\000\056\002\uffdd\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\030" +
    "\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\001\002" +
    "\000\064\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\027\uffbc\030\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\001\002\000\062\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\030\uffdb\032" +
    "\062\033\064\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\001\002\000\064\002\uffba\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\027\uffba\030" +
    "\uffba\032\uffba\033\uffba\034\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\001\002\000\064\002\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\027" +
    "\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\001\002\000\064\002\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\001\002\000\064\002\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\001\002\000\064\002" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\027\102\030\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\001\002\000" +
    "\064\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\027\uffb7\030\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\001" +
    "\002\000\064\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\027\uffbb\030\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\001\002\000\062\002\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\030\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\001\002\000\062\002\uffd3\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\030\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\001\002\000\026\011\026\021\046\027\033\030\103" +
    "\035\032\053\105\054\040\055\047\056\031\057\045\001" +
    "\002\000\062\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\030\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\001" +
    "\002\000\024\011\026\021\046\027\033\035\032\053\034" +
    "\054\040\055\047\056\031\057\045\001\002\000\060\006" +
    "\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc6\025\uffc6\026\111\027\uffc1\030\uffc1\031\110\032\uffc1" +
    "\033\uffc1\034\uffc6\041\uffc1\001\002\000\004\030\107\001" +
    "\002\000\062\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\030\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001" +
    "\002\000\004\053\132\001\002\000\004\053\130\001\002" +
    "\000\064\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\027\uffc3\030\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\001\002\000\010\024\114\025\115\034\uffc8\001\002\000" +
    "\004\053\121\001\002\000\004\053\120\001\002\000\004" +
    "\034\117\001\002\000\024\011\uffcb\021\uffcb\027\uffcb\035" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002" +
    "\000\004\034\uffc9\001\002\000\004\025\122\001\002\000" +
    "\004\053\034\001\002\000\004\016\uffc4\001\002\000\004" +
    "\016\uffc5\001\002\000\004\016\126\001\002\000\024\011" +
    "\026\021\046\027\033\035\032\053\034\054\040\055\047" +
    "\056\031\057\045\001\002\000\004\034\uffca\001\002\000" +
    "\066\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\026\111\027\uffc1\030\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\001\002\000\064\002\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\027\uffc2" +
    "\030\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\001\002\000\012\024\uffc6\025\uffc6\031\110" +
    "\034\uffc6\001\002\000\010\024\uffc7\025\uffc7\034\uffc7\001" +
    "\002\000\004\030\135\001\002\000\062\002\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\001\002\000\056\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\030\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\001\002\000\004\030\140\001\002\000\062\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002\000\004\036\142" +
    "\001\002\000\024\011\026\021\046\027\033\035\032\053" +
    "\034\054\040\055\047\056\031\057\045\001\002\000\004" +
    "\037\144\001\002\000\024\011\026\021\046\027\033\035" +
    "\032\053\034\054\040\055\047\056\031\057\045\001\002" +
    "\000\004\040\146\001\002\000\062\002\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\001\002\000\062\002\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\001\002\000\056\002\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\151\023" +
    "\153\030\uffe2\034\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\001\002\000\024\011\uffb3\021\uffb3\027\uffb3\035\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002\000\024" +
    "\011\uffe5\021\uffe5\027\uffe5\035\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\001\002\000\024\011\uffb2\021\uffb2" +
    "\027\uffb2\035\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\001\002\000\052\002\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\030\uffe6\034\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\001\002\000\024\011\026\021" +
    "\046\027\033\035\032\053\034\054\040\055\047\056\031" +
    "\057\045\001\002\000\056\002\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\030" +
    "\uffe4\034\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002" +
    "\000\056\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\151\023\153\030\uffe2\034\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002\000\052\002\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\030\uffe3\034\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\001" +
    "\002\000\016\012\162\013\164\014\166\015\170\016\165" +
    "\017\167\001\002\000\024\011\uffa9\021\uffa9\027\uffa9\035" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\001\002" +
    "\000\024\011\uffef\021\uffef\027\uffef\035\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\001\002\000\024\011\uffaa" +
    "\021\uffaa\027\uffaa\035\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\001\002\000\024\011\uffab\021\uffab\027\uffab" +
    "\035\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\001" +
    "\002\000\024\011\uffa7\021\uffa7\027\uffa7\035\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\057\uffa7\001\002\000\024\011" +
    "\uffa6\021\uffa6\027\uffa6\035\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\001\002\000\024\011\uffa8\021\uffa8\027" +
    "\uffa8\035\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\001\002\000\024\011\026\021\046\027\033\035\032\053" +
    "\034\054\040\055\047\056\031\057\045\001\002\000\032" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\030" +
    "\uffee\034\uffee\036\uffee\037\uffee\040\uffee\041\uffee\001\002" +
    "\000\020\027\033\035\032\053\034\054\040\055\047\056" +
    "\031\057\045\001\002\000\056\002\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\030\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\001" +
    "\002\000\052\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\177\021\200\030\uffe8\034\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\001\002\000\046\002\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\030\uffec\034\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\001\002\000\024\011\uffb5\021\uffb5" +
    "\027\uffb5\035\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\uffb5\001\002\000\024\011\uffb4\021\uffb4\027\uffb4\035\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002\000" +
    "\024\011\uffeb\021\uffeb\027\uffeb\035\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\001\002\000\024\011\026\021" +
    "\046\027\033\035\032\053\034\054\040\055\047\056\031" +
    "\057\045\001\002\000\052\002\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\030\uffea\034\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\001\002\000\052\002\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\177\021\200" +
    "\030\uffe8\034\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\001" +
    "\002\000\046\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\030\uffe9\034\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\001\002\000\024\011\026\021\046\027\033\035\032\053" +
    "\034\054\040\055\047\056\031\057\045\001\002\000\010" +
    "\002\ufff7\004\ufff7\005\020\001\002\000\006\002\ufff8\004" +
    "\ufff8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\004\007\016\001\001\000\010\002\015" +
    "\003\005\004\004\001\001\000\004\005\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\043\010\035\011\047\012\042\013\040\014" +
    "\024\015\022\016\026\021\036\023\023\030\034\031\041" +
    "\032\027\001\001\000\004\055\174\001\001\000\004\063" +
    "\172\001\001\000\004\053\160\001\001\000\002\001\001" +
    "\000\004\060\147\001\001\000\006\033\100\034\146\001" +
    "\001\000\002\001\001\000\034\006\140\010\035\011\047" +
    "\012\042\013\040\014\024\015\022\016\026\021\036\023" +
    "\023\030\034\031\041\032\027\001\001\000\034\006\136" +
    "\010\035\011\047\012\042\013\040\014\024\015\022\016" +
    "\026\021\036\023\023\030\034\031\041\032\027\001\001" +
    "\000\004\044\111\001\001\000\002\001\001\000\004\022" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\052\001\001\000\004\052\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\035\011\047\012\060\013\040\014\024" +
    "\015\022\016\026\021\036\023\023\030\034\031\041\032" +
    "\027\001\001\000\002\001\001\000\006\045\074\047\067" +
    "\001\001\000\002\001\001\000\006\030\064\032\027\001" +
    "\001\000\004\022\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\100\034\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\105" +
    "\010\035\011\047\012\042\013\040\014\024\015\022\016" +
    "\026\021\036\023\023\030\034\031\041\032\027\036\103" +
    "\001\001\000\002\001\001\000\034\006\133\010\035\011" +
    "\047\012\042\013\040\014\024\015\022\016\026\021\036" +
    "\023\023\030\034\031\041\032\027\001\001\000\006\040" +
    "\112\044\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\122\042\124\043\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\126\010\035\011\047\012\042\013\040\014\024" +
    "\015\022\016\026\021\036\023\023\030\034\031\041\032" +
    "\027\001\001\000\002\001\001\000\004\044\130\001\001" +
    "\000\002\001\001\000\004\040\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\142\010\035\011\047\012\042\013\040\014\024" +
    "\015\022\016\026\021\036\023\023\030\034\031\041\032" +
    "\027\001\001\000\002\001\001\000\034\006\144\010\035" +
    "\011\047\012\042\013\040\014\024\015\022\016\026\021" +
    "\036\023\023\030\034\031\041\032\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\153\025\151\001\001\000\002\001\001\000\004\061\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\035\011\047\016\155\021\036\023\023\030\034\031\041" +
    "\032\027\001\001\000\004\062\156\001\001\000\006\020" +
    "\157\025\151\001\001\000\002\001\001\000\004\026\162" +
    "\001\001\000\002\001\001\000\004\054\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\035\011\047\014" +
    "\171\015\022\016\026\021\036\023\023\030\034\031\041" +
    "\032\027\001\001\000\002\001\001\000\016\010\035\011" +
    "\047\021\173\030\034\031\041\032\027\001\001\000\002" +
    "\001\001\000\006\017\175\024\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\201" +
    "\001\001\000\024\010\035\011\047\015\202\016\026\021" +
    "\036\023\023\030\034\031\041\032\027\001\001\000\004" +
    "\057\203\001\001\000\006\017\204\024\200\001\001\000" +
    "\002\001\001\000\034\006\206\010\035\011\047\012\042" +
    "\013\040\014\024\015\022\016\026\021\036\023\023\030" +
    "\034\031\041\032\027\001\001\000\004\007\207\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OCL_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OCL_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OCL_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    GeradorDeCodigo ger = GeradorDeCodigo.getInstance();

    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$OCL_Parser$actions {
  private final OCL_Parser parser;

  /** Constructor */
  CUP$OCL_Parser$actions(OCL_Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$OCL_Parser$do_action(
    int                        CUP$OCL_Parser$act_num,
    java_cup.runtime.lr_parser CUP$OCL_Parser$parser,
    java.util.Stack            CUP$OCL_Parser$stack,
    int                        CUP$OCL_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OCL_Parser$result;

      /* select the action based on the action number */
      switch (CUP$OCL_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OperadorRelacional ::= NEQUAL 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.DIF);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OperadorRelacional ::= LE 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENORIGUAL);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OperadorRelacional ::= GE 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MAIORIGUAL);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OperadorRelacional ::= LT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENORQ);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OperadorRelacional ::= GT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MAIORQ);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OperadorRelacional ::= EQUAL 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.IGUAL);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OperadorLogico ::= IMPLIES 
            {
              Operador RESULT =null;
		 RESULT = new Operador(Operador.IMPLIES);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OperadorLogico ::= XOR 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.XOR);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OperadorLogico ::= OR 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.OR);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OperadorLogico ::= AND 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.AND);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadorUnario ::= NOT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.NOT);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",17, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OperadorUnario ::= MINUS 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENOSU);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",17, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadorMulti ::= DIVIDE 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.DIVIDIDO);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",19, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OperadorMulti ::= MULT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.VEZES);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",19, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadorMais ::= MINUS 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENOS);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMais",18, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadorMais ::= PLUS 
            {
              Operador RESULT =null;
		 RESULT = new Operador(Operador.MAIS);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMais",18, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperadorColecao ::= FORALL 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OperadorColecao ::= SELECT 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OperadorColecao ::= EXISTS 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OperadorColecao ::= EXCLUDES 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OperadorColecao ::= INCLUDES 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OperadorColecao ::= SIZE 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OperadorColecao ::= INCLUDESALL 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Literal ::= FALSE 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(f, Literal.BOOLEANO); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Literal ::= TRUE 
            {
              Literal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(t, Literal.BOOLEANO); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Literal ::= NUMERO 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(n, Literal.NUMERO); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Literal ::= STRING 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(s, Literal.STRING); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CaminhoAux ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",34, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CaminhoAux ::= DCOLON ID CaminhoAux 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",34, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Caminho ::= ID CaminhoAux 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Caminho",24, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EspecificadorTipoSimples ::= Caminho 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoSimples",33, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EspecificadorTipo ::= EspecificadorTipoSimples 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipo",32, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DeclaradorAux ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",30, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DeclaradorAux ::= COMMA ID DeclaradorAux 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",30, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EspecificadorTipoOpt ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EspecificadorTipoOpt ::= COLON ID 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EspecificadorTipoOpt ::= SEMICOL ID COLON EspecificadorTipo EQUAL ExpOcl 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Declarador ::= ID DeclaradorAux EspecificadorTipoOpt BAR 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Declarador",28, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListaParametrosOpt ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ListaParametrosOpt",27, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListaParametrosOpt ::= COMMA ExpOcl ListaParametrosOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ListaParametrosOpt",27, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListaParametros ::= ExpOcl ListaParametrosOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",29, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ParametrosChamadaPropriedade ::= LPAREN RPAREN 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ParametrosChamadaPropriedade ::= LPAREN ExpOcl RPAREN 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ParametrosChamadaPropriedade ::= LPAREN Declarador ExpOcl RPAREN 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ParametrosChamadaPropriedadeOpt ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",26, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",26, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ChamadaPropriedade ::= Caminho ParametrosChamadaPropriedadeOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedade",22, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ChamadaPropriedadeColecao ::= OperadorColecao ParametrosChamadaPropriedadeOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedadeColecao",37, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpressaoIf ::= IF ExpOcl THEN ExpOcl ELSE ExpOcl ENDIF 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressaoIf",23, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpPrimaria ::= ExpressaoIf 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpPrimaria ::= LPAREN ExpOcl RPAREN 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpPrimaria ::= ChamadaPropriedade 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ExpPrimaria ::= Literal 
            {
              Expressao RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(l); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpPosFixadaAux ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpPosFixadaAux ::= RARROW ChamadaPropriedadeColecao ExpPosFixadaAux 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpPosFixadaAux ::= DOT ChamadaPropriedade ExpPosFixadaAux 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpPosFixada ::= ExpPrimaria ExpPosFixadaAux 
            {
              Expressao RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Expressao ep = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int epfleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int epfright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao epf = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(ep, epf); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixada",15, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpUnaria ::= ExpPosFixada 
            {
              Expressao RESULT =null;
		int epfleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int epfright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao epf = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(epf); RESULT = new Expressao(epf); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",12, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExpUnaria ::= OperadorUnario NT$10 ExpPosFixada 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int epfleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int epfright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao epf = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(epf); RESULT = new Expressao(o, epf); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",12, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$10 ::= 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ExpMultiAux ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",14, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExpMultiAux ::= OperadorMulti NT$8 ExpUnaria NT$9 ExpMultiAux 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(e2); RESULT = new Expressao(o, e1, e2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",14, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Expressao RESULT =(Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(e1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$8 ::= 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExpMultiplicativa ::= ExpUnaria NT$7 ExpMultiAux 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int eunleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int eunright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao eun = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int eauxleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eauxright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao eaux = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(eaux); RESULT = new Expressao(eun, eaux); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",11, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              Expressao RESULT =null;
		int eunleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eunright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao eun = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(eun); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExpAditivaAux ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",13, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExpAditivaAux ::= OperadorMais NT$5 ExpMultiplicativa NT$6 ExpAditivaAux 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao op1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao op2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(op2); RESULT = new Expressao(o, op1, op2);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",13, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Expressao RESULT =(Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao op1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(op1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExpAditiva ::= ExpMultiplicativa NT$4 ExpAditivaAux 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int emulleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int emulright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao emul = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int eauxleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eauxright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao eaux = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(eaux); RESULT = new Expressao(emul, eaux); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",10, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              Expressao RESULT =null;
		int emulleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int emulright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao emul = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(emul); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExpRelacional ::= ExpAditiva NT$2 OperadorRelacional NT$3 ExpAditiva 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		Expressao a1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao a2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(a1); RESULT = new Expressao(o, a1, a2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Expressao RESULT =(Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao a1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Expressao RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao a1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(a1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ExpRelacional ::= ExpAditiva 
            {
              Expressao RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao a = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(a); RESULT = new Expressao(a); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ExpLogica ::= ExpRelacional NT$0 OperadorLogico NT$1 ExpLogica 
            {
              Expressao RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		Expressao r1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao l1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(l1); RESULT = new Expressao(o, r1, l1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Expressao RESULT =(Expressao) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao r1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.oprd(o); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Expressao RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao r1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 parser.ger.concatenarSubExpressoesDe(r1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ExpLogica ::= ExpRelacional 
            {
              Expressao RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao r = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(r); RESULT = new Expressao(r); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ExpOcl ::= ExpLogica 
            {
              Expressao RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 parser.ger.concatenarSubExpressoesDe(e); RESULT = new Expressao(e); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpOcl",4, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InvContext ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InvContext ::= INV ID COLON ExpOcl InvContext 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InvContext ::= INV COLON ExpOcl InvContext 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassifierContexto ::= ID DCOLON ID 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassifierContexto ::= ID COLON ID 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassifierContexto ::= ID 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclaracaoContexto ::= CONTEXT ClassifierContexto 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaracaoContexto",2, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Restricao ::= DeclaracaoContexto InvContext 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Restricao",1, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ExpressoesOcl ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ExpressoesOcl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		No start_val = (No)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		RESULT = start_val;
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OCL_Parser$parser.done_parsing();
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ExpressoesOcl ::= Restricao ExpressoesOcl 
            {
              No RESULT =null;
		System.out.println("casei");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

