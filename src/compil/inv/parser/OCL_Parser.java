
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 02 14:20:51 BRT 2011
//----------------------------------------------------

package compil.inv.parser;

import compil.inv.semantica.*;
import compil.inv.geracao.GeradorDeCodigo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 02 14:20:51 BRT 2011
  */
public class OCL_Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public OCL_Parser() {super();}

  /** Constructor which sets the default scanner. */
  public OCL_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OCL_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\004\004\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\043\002\000" +
    "\002\010\007\000\002\044\002\000\002\010\010\000\002" +
    "\010\002\000\002\006\003\000\002\012\003\000\002\012" +
    "\005\000\002\013\003\000\002\013\005\000\002\014\004" +
    "\000\002\017\005\000\002\017\002\000\002\015\004\000" +
    "\002\020\005\000\002\020\002\000\002\016\004\000\002" +
    "\016\003\000\002\021\004\000\002\022\005\000\002\022" +
    "\005\000\002\022\002\000\002\007\003\000\002\007\003" +
    "\000\002\007\005\000\002\007\003\000\002\023\011\000" +
    "\002\042\004\000\002\031\004\000\002\035\003\000\002" +
    "\035\002\000\002\034\006\000\002\034\005\000\002\034" +
    "\004\000\002\036\006\000\002\040\010\000\002\040\004" +
    "\000\002\040\002\000\002\037\005\000\002\037\002\000" +
    "\002\032\004\000\002\033\005\000\002\033\002\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\003\000\002\026\003\000\002\024\003\000\002\024" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\006\002\uffff\004\007\001\002\000\004\002" +
    "\176\001\002\000\010\002\ufff5\004\ufff5\005\020\001\002" +
    "\000\006\002\uffff\004\007\001\002\000\004\051\011\001" +
    "\002\000\010\002\ufffd\004\ufffd\005\ufffd\001\002\000\014" +
    "\002\ufffc\004\ufffc\005\ufffc\025\013\026\012\001\002\000" +
    "\004\051\015\001\002\000\004\051\014\001\002\000\010" +
    "\002\ufffb\004\ufffb\005\ufffb\001\002\000\010\002\ufffa\004" +
    "\ufffa\005\ufffa\001\002\000\004\002\001\001\002\000\006" +
    "\002\ufffe\004\ufffe\001\002\000\006\025\022\051\021\001" +
    "\002\000\004\025\172\001\002\000\024\011\026\021\046" +
    "\027\033\035\032\051\034\052\040\053\047\054\031\055" +
    "\045\001\002\000\052\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\165\021\166\030\uffed\034\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\001\002\000\020\027\033\035" +
    "\032\051\034\052\040\053\047\054\031\055\045\001\002" +
    "\000\046\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\012\153\013\155\014\157\015\161\016\156\017\160" +
    "\030\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\001" +
    "\002\000\020\027\uffbe\035\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\001\002\000\064\002\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\027\101\030\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\001\002\000\056\002\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\144\023\146\030\uffea\034\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\001\002\000\062\002\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\030" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\001\002\000\024\011\026\021\046\027\033\035" +
    "\032\051\034\052\040\053\047\054\031\055\045\001\002" +
    "\000\024\011\026\021\046\027\033\035\032\051\034\052" +
    "\040\053\047\054\031\055\045\001\002\000\066\002\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\026\110\027\uffcf\030\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\001\002" +
    "\000\062\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\030\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002" +
    "\000\062\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\030\uffe4\032\061\033" +
    "\063\034\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002" +
    "\000\056\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\030\uffe8\034\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\001\002\000\062\002\uffce" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\030\uffce\032\uffce\033\uffce\034\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\001\002\000\032\002\ufff3" +
    "\004\ufff3\005\ufff3\006\056\007\057\010\055\030\ufff3\034" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\041\054\001\002\000\022" +
    "\002\ufff4\004\ufff4\005\ufff4\030\ufff4\034\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\001\002\000\062\002\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\030\uffe0\032\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\001\002\000\010\002\ufff9\004\ufff9\005\ufff9" +
    "\001\002\000\062\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\030\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\001\002\000\020\027\uffbf\035\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\001\002\000\062\002\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\001\002\000\062\002\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\001\002\000\010\002\ufff5\004\ufff5" +
    "\005\020\001\002\000\006\002\ufff8\004\ufff8\001\002\000" +
    "\024\011\026\021\046\027\033\035\032\051\034\052\040" +
    "\053\047\054\031\055\045\001\002\000\024\011\uffba\021" +
    "\uffba\027\uffba\035\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\001\002\000\024\011\uffbd\021\uffbd\027\uffbd\035" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\001\002" +
    "\000\024\011\uffbc\021\uffbc\027\uffbc\035\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\001\002\000\024\011\uffbb" +
    "\021\uffbb\027\uffbb\035\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\001\002\000\022\002\ufff2\004\ufff2\005\ufff2" +
    "\030\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\001\002\000" +
    "\020\042\076\043\070\044\071\045\072\046\075\047\073" +
    "\050\066\001\002\000\056\002\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\030" +
    "\uffe7\034\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\001\002" +
    "\000\004\051\034\001\002\000\062\002\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\030\uffe4\032\061\033\063\034\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\001\002\000\056\002\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\030\uffe6\034\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\001\002\000\064\002\uffca\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\027\uffca\030" +
    "\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\001\002\000\062\002\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\030" +
    "\uffe4\032\061\033\063\034\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\001\002\000\064\002\uffc8\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\027" +
    "\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\001\002\000\064\002\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\001\002\000\064\002\uffc4\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\001\002\000\064\002" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\001\002\000" +
    "\064\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\027\101\030\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\001" +
    "\002\000\064\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\027\uffc5\030\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\001\002\000\064\002\uffc9\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\027\uffc9" +
    "\030\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\001\002\000\062\002\uffde\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\030\uffde\032\uffde\033\uffde\034\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\001\002\000\062\002\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\030\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\001\002\000\026\011\026\021\046\027\033" +
    "\030\103\035\032\051\104\052\040\053\047\054\031\055" +
    "\045\001\002\000\024\011\026\021\046\027\033\035\032" +
    "\051\034\052\040\053\047\054\031\055\045\001\002\000" +
    "\062\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\030\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002\000" +
    "\060\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffd2\025\uffd2\026\110\027\uffcf\030\uffcf\031\107" +
    "\032\uffcf\033\uffcf\034\uffd2\041\uffcf\001\002\000\004\030" +
    "\106\001\002\000\062\002\uffd9\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\030\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\001\002\000\004\051\127\001\002\000\004\051\125" +
    "\001\002\000\064\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\027\uffd1\030" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\001\002\000\010\024\113\025\114\034\uffd4\001" +
    "\002\000\004\051\120\001\002\000\004\051\117\001\002" +
    "\000\004\034\116\001\002\000\024\011\uffd7\021\uffd7\027" +
    "\uffd7\035\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\001\002\000\004\034\uffd5\001\002\000\004\025\121\001" +
    "\002\000\004\051\034\001\002\000\004\016\123\001\002" +
    "\000\024\011\026\021\046\027\033\035\032\051\034\052" +
    "\040\053\047\054\031\055\045\001\002\000\004\034\uffd6" +
    "\001\002\000\066\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\026\110\027" +
    "\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\001\002\000\064\002\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\001\002\000\012\024\uffd2\025" +
    "\uffd2\031\107\034\uffd2\001\002\000\010\024\uffd3\025\uffd3" +
    "\034\uffd3\001\002\000\004\030\132\001\002\000\062\002" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\030\uffda\032\uffda\033\uffda\034\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\001\002\000\056\002" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\030\uffe5\034\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\001\002\000\004\030\135\001\002\000" +
    "\062\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\030\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\001\002\000" +
    "\004\036\137\001\002\000\024\011\026\021\046\027\033" +
    "\035\032\051\034\052\040\053\047\054\031\055\045\001" +
    "\002\000\004\037\141\001\002\000\024\011\026\021\046" +
    "\027\033\035\032\051\034\052\040\053\047\054\031\055" +
    "\045\001\002\000\004\040\143\001\002\000\062\002\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\001\002\000\024\011\uffc1" +
    "\021\uffc1\027\uffc1\035\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\001\002\000\024\011\026\021\046\027\033" +
    "\035\032\051\034\052\040\053\047\054\031\055\045\001" +
    "\002\000\024\011\uffc0\021\uffc0\027\uffc0\035\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\001\002\000\052\002" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\030\uffec\034\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\001\002\000\056\002\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\144\023\146\030\uffea\034" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\001\002\000\052" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\030\uffeb\034\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\001\002\000\062\002\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\030\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\001\002\000\024\011\uffb7\021\uffb7\027\uffb7\035\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\001\002\000" +
    "\024\011\026\021\046\027\033\035\032\051\034\052\040" +
    "\053\047\054\031\055\045\001\002\000\024\011\uffb8\021" +
    "\uffb8\027\uffb8\035\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\001\002\000\024\011\uffb9\021\uffb9\027\uffb9\035" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\001\002" +
    "\000\024\011\uffb5\021\uffb5\027\uffb5\035\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\001\002\000\024\011\uffb4" +
    "\021\uffb4\027\uffb4\035\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\001\002\000\024\011\uffb6\021\uffb6\027\uffb6" +
    "\035\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\001" +
    "\002\000\032\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\030\ufff0\034\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\001\002\000\056\002\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\030\uffe9" +
    "\034\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\001\002\000" +
    "\046\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\030" +
    "\uffef\034\uffef\036\uffef\037\uffef\040\uffef\041\uffef\001\002" +
    "\000\024\011\uffc3\021\uffc3\027\uffc3\035\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\001\002\000\024\011\uffc2" +
    "\021\uffc2\027\uffc2\035\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\001\002\000\024\011\026\021\046\027\033" +
    "\035\032\051\034\052\040\053\047\054\031\055\045\001" +
    "\002\000\052\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\165\021\166\030\uffed\034\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\001\002\000\046\002\uffee\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\030\uffee\034\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\001\002\000\024\011\026\021\046" +
    "\027\033\035\032\051\034\052\040\053\047\054\031\055" +
    "\045\001\002\000\010\002\ufff7\004\ufff7\005\ufff7\001\002" +
    "\000\010\002\ufff5\004\ufff5\005\020\001\002\000\006\002" +
    "\ufff6\004\ufff6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\004\010\016\001\001\000\010\002\015" +
    "\003\005\004\004\001\001\000\004\005\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\043\007\035\011\047\012\041\013\040\014" +
    "\024\015\022\016\027\021\036\023\042\024\023\031\034" +
    "\032\026\001\001\000\006\017\163\025\166\001\001\000" +
    "\016\007\035\011\047\021\162\023\042\031\034\032\026" +
    "\001\001\000\004\027\153\001\001\000\002\001\001\000" +
    "\006\034\077\035\151\001\001\000\006\020\146\026\144" +
    "\001\001\000\002\001\001\000\034\006\135\007\035\011" +
    "\047\012\041\013\040\014\024\015\022\016\027\021\036" +
    "\023\042\024\023\031\034\032\026\001\001\000\034\006" +
    "\133\007\035\011\047\012\041\013\040\014\024\015\022" +
    "\016\027\021\036\023\042\024\023\031\034\032\026\001" +
    "\001\000\004\033\110\001\001\000\002\001\001\000\004" +
    "\022\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\051" +
    "\001\001\000\002\001\001\000\032\007\035\011\047\012" +
    "\057\013\040\014\024\015\022\016\027\021\036\023\042" +
    "\024\023\031\034\032\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\073\042\066\001\001\000\002\001" +
    "\001\000\006\031\063\032\026\001\001\000\004\022\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\077\035\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\006\104\007\035\011\047\012" +
    "\041\013\040\014\024\015\022\016\027\021\036\023\042" +
    "\024\023\031\034\032\026\036\101\001\001\000\034\006" +
    "\130\007\035\011\047\012\041\013\040\014\024\015\022" +
    "\016\027\021\036\023\042\024\023\031\034\032\026\001" +
    "\001\000\002\001\001\000\006\033\110\037\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\121\001\001\000\002\001\001\000\034\006\123\007" +
    "\035\011\047\012\041\013\040\014\024\015\022\016\027" +
    "\021\036\023\042\024\023\031\034\032\026\001\001\000" +
    "\002\001\001\000\004\033\125\001\001\000\002\001\001" +
    "\000\004\037\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\137\007" +
    "\035\011\047\012\041\013\040\014\024\015\022\016\027" +
    "\021\036\023\042\024\023\031\034\032\026\001\001\000" +
    "\002\001\001\000\034\006\141\007\035\011\047\012\041" +
    "\013\040\014\024\015\022\016\027\021\036\023\042\024" +
    "\023\031\034\032\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\035\011\047\016" +
    "\147\021\036\023\042\024\023\031\034\032\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\150\026" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\035\011\047\014\161\015\022\016" +
    "\027\021\036\023\042\024\023\031\034\032\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\035\011\047\015\167\016\027\021\036" +
    "\023\042\024\023\031\034\032\026\001\001\000\006\017" +
    "\170\025\166\001\001\000\002\001\001\000\034\006\172" +
    "\007\035\011\047\012\041\013\040\014\024\015\022\016" +
    "\027\021\036\023\042\024\023\031\034\032\026\001\001" +
    "\000\004\044\173\001\001\000\004\010\174\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OCL_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OCL_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OCL_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    GeradorDeCodigo ger = GeradorDeCodigo.getInstance();

    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$OCL_Parser$actions {
  private final OCL_Parser parser;

  /** Constructor */
  CUP$OCL_Parser$actions(OCL_Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$OCL_Parser$do_action(
    int                        CUP$OCL_Parser$act_num,
    java_cup.runtime.lr_parser CUP$OCL_Parser$parser,
    java.util.Stack            CUP$OCL_Parser$stack,
    int                        CUP$OCL_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OCL_Parser$result;

      /* select the action based on the action number */
      switch (CUP$OCL_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadorRelacional ::= NEQUAL 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.DIF);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadorRelacional ::= LE 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENORIGUAL);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperadorRelacional ::= GE 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MAIORIGUAL);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OperadorRelacional ::= LT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENORQ);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OperadorRelacional ::= GT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MAIORQ);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OperadorRelacional ::= EQUAL 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.IGUAL);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",21, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OperadorLogico ::= IMPLIES 
            {
              Operador RESULT =null;
		 RESULT = new Operador(Operador.IMPLIES);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",22, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OperadorLogico ::= XOR 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.XOR);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",22, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OperadorLogico ::= OR 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.OR);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",22, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OperadorLogico ::= AND 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.AND);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",22, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OperadorUnario ::= NOT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.NOT);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",18, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OperadorUnario ::= MINUS 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENOSU);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",18, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OperadorMulti ::= DIVIDE 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.DIVIDIDO);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OperadorMulti ::= MULT 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.VEZES);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",20, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OperadorMais ::= MINUS 
            {
              Operador RESULT =null;
		RESULT = new Operador(Operador.MENOS);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMais",19, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OperadorMais ::= PLUS 
            {
              Operador RESULT =null;
		 RESULT = new Operador(Operador.MAIS);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorMais",19, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OperadorColecao ::= FORALL 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OperadorColecao ::= SELECT 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OperadorColecao ::= EXISTS 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OperadorColecao ::= EXCLUDES 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OperadorColecao ::= INCLUDES 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OperadorColecao ::= SIZE 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OperadorColecao ::= INCLUDESALL 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",31, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Literal ::= FALSE 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(f, Literal.BOOLEANO); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Literal ::= TRUE 
            {
              Literal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(t, Literal.BOOLEANO); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Literal ::= NUMERO 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(n, Literal.NUMERO); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Literal ::= STRING 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Literal(s, Literal.STRING); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CaminhoAux ::= 
            {
              Caminho RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CaminhoAux ::= DCOLON ID CaminhoAux 
            {
              Caminho RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Caminho c = (Caminho)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Caminho(id, c); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",25, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Caminho ::= ID CaminhoAux 
            {
              Caminho RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Caminho c = (Caminho)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Caminho(id, c); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Caminho",24, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DeclaradorAux ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",29, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DeclaradorAux ::= COMMA ID DeclaradorAux 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",29, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EspecificadorTipoOpt ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",30, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EspecificadorTipoOpt ::= COLON ID 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",30, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EspecificadorTipoOpt ::= SEMICOL ID COLON Caminho EQUAL ExpOcl 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",30, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Declarador ::= ID DeclaradorAux EspecificadorTipoOpt BAR 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Declarador",28, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ParametrosChamadaPropriedade ::= LPAREN RPAREN 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",26, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ParametrosChamadaPropriedade ::= LPAREN ExpOcl RPAREN 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",26, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParametrosChamadaPropriedade ::= LPAREN Declarador ExpOcl RPAREN 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",26, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParametrosChamadaPropriedadeOpt ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",27, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",27, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ChamadaPropriedade ::= Caminho ParametrosChamadaPropriedadeOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedade",23, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ChamadaPropriedadeColecao ::= OperadorColecao ParametrosChamadaPropriedadeOpt 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedadeColecao",32, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpressaoIf ::= IF ExpOcl THEN ExpOcl ELSE ExpOcl ENDIF 
            {
              ExpressaoIf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Expressao e3 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		 RESULT = new ExpressaoIf(e1,e2,e3); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressaoIf",17, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExpPrimaria ::= ExpressaoIf 
            {
              Expressao RESULT =null;
		int eifleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eifright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		ExpressaoIf eif = (ExpressaoIf)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(eif); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ExpPrimaria ::= LPAREN ExpOcl RPAREN 
            {
              Expressao RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		 RESULT = new Expressao(e); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ExpPrimaria ::= ChamadaPropriedade 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExpPrimaria ::= Literal 
            {
              Expressao RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(l); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",5, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExpPosFixadaAux ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExpPosFixadaAux ::= RARROW ChamadaPropriedadeColecao ExpPosFixadaAux 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExpPosFixadaAux ::= DOT ChamadaPropriedade ExpPosFixadaAux 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",16, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExpPosFixada ::= ExpPrimaria ExpPosFixadaAux 
            {
              Expressao RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Expressao ep = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int epfleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int epfright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao epf = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(ep, epf); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpPosFixada",15, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExpUnaria ::= ExpPosFixada 
            {
              Expressao RESULT =null;
		int epfleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int epfright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao epf = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(epf); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",12, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExpUnaria ::= OperadorUnario ExpPosFixada 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int epfleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int epfright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao epf = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(o, epf); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",12, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExpMultiAux ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",14, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ExpMultiAux ::= OperadorMulti ExpUnaria ExpMultiAux 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(o, e1, e2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",14, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExpMultiplicativa ::= ExpUnaria ExpMultiAux 
            {
              Expressao RESULT =null;
		int eunleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int eunright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Expressao eun = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int eauxleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eauxright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao eaux = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(eun, eaux); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",11, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ExpAditivaAux ::= 
            {
              Expressao RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",13, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExpAditivaAux ::= OperadorMais ExpMultiplicativa ExpAditivaAux 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Expressao op1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao op2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(o, op1, op2);
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",13, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ExpAditiva ::= ExpMultiplicativa ExpAditivaAux 
            {
              Expressao RESULT =null;
		int emulleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int emulright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Expressao emul = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int eauxleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eauxright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao eaux = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(emul, eaux); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",10, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ExpRelacional ::= ExpAditiva OperadorRelacional ExpAditiva 
            {
              Expressao RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao a1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao a2 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(o, a1, a2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ExpRelacional ::= ExpAditiva 
            {
              Expressao RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao a = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(a); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",9, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ExpLogica ::= ExpRelacional OperadorLogico ExpLogica 
            {
              Expressao RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao r1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Operador o = (Operador)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao l1 = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(o, r1, l1); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExpLogica ::= ExpRelacional 
            {
              Expressao RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao r = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(r); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExpOcl ::= ExpLogica 
            {
              Expressao RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Expressao(e); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpOcl",4, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // InvContext ::= 
            {
              Invariante RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InvContext ::= INV ID COLON ExpOcl NT$1 InvContext 
            {
              Invariante RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Invariante) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Invariante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 RESULT = new Invariante(e, id); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InvContext ::= INV COLON ExpOcl NT$0 InvContext 
            {
              Invariante RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Invariante) ((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("InvContext",6, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Invariante RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
 RESULT = new Invariante(e); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassifierContexto ::= ID DCOLON ID 
            {
              Classe RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Classe(id1, id2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassifierContexto ::= ID COLON ID 
            {
              Classe RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Classe(id1, id2); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassifierContexto ::= ID 
            {
              Classe RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Classe(id); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclaracaoContexto ::= CONTEXT ClassifierContexto 
            {
              Classe RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Classe c = (Classe)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = c;
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("DeclaracaoContexto",2, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Restricao ::= DeclaracaoContexto InvContext 
            {
              Restricao RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		Classe c = (Classe)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()).right;
		Invariante i = (Invariante)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.peek()).value;
		 RESULT = new Restricao(c); 
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("Restricao",1, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ExpressoesOcl ::= 
            {
              No RESULT =null;

              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ExpressoesOcl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).right;
		No start_val = (No)((java_cup.runtime.Symbol) CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)).value;
		RESULT = start_val;
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OCL_Parser$parser.done_parsing();
          return CUP$OCL_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ExpressoesOcl ::= Restricao ExpressoesOcl 
            {
              No RESULT =null;
		System.out.println("casei");
              CUP$OCL_Parser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.elementAt(CUP$OCL_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$OCL_Parser$stack.peek()), RESULT);
            }
          return CUP$OCL_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

