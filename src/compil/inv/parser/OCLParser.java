
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 04 20:58:46 BRT 2011
//----------------------------------------------------

package compil.inv.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 04 20:58:46 BRT 2011
  */
public class OCLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public OCLParser() {super();}

  /** Constructor which sets the default scanner. */
  public OCLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OCLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\004\004\000\002\005\003" +
    "\000\002\005\005\000\002\051\002\000\002\007\007\000" +
    "\002\052\002\000\002\007\010\000\002\007\002\000\002" +
    "\006\003\000\002\012\003\000\002\012\005\000\002\015" +
    "\003\000\002\015\005\000\002\016\004\000\002\023\005" +
    "\000\002\023\002\000\002\017\004\000\002\024\005\000" +
    "\002\024\002\000\002\020\004\000\002\020\003\000\002" +
    "\026\004\000\002\027\005\000\002\053\002\000\002\027" +
    "\006\000\002\027\002\000\002\010\003\000\002\010\003" +
    "\000\002\010\005\000\002\010\003\000\002\031\011\000" +
    "\002\047\005\000\002\054\002\000\002\030\006\000\002" +
    "\046\005\000\002\050\003\000\002\050\002\000\002\034" +
    "\003\000\002\034\002\000\002\033\006\000\002\033\005" +
    "\000\002\033\004\000\002\037\004\000\002\035\005\000" +
    "\002\035\002\000\002\055\002\000\002\036\007\000\002" +
    "\041\010\000\002\041\004\000\002\041\002\000\002\040" +
    "\005\000\002\040\002\000\002\042\003\000\002\043\003" +
    "\000\002\032\004\000\002\044\005\000\002\044\002\000" +
    "\002\011\003\000\002\011\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\003\000\002\022\003\000" +
    "\002\025\003\000\002\025\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\002\uffff\004\007\001\002\000\004\002" +
    "\206\001\002\000\010\002\ufff6\004\ufff6\005\016\001\002" +
    "\000\006\002\uffff\004\007\001\002\000\004\054\011\001" +
    "\002\000\010\002\ufffd\004\ufffd\005\ufffd\001\002\000\012" +
    "\002\ufffc\004\ufffc\005\ufffc\025\012\001\002\000\004\054" +
    "\013\001\002\000\010\002\ufffb\004\ufffb\005\ufffb\001\002" +
    "\000\004\002\001\001\002\000\006\002\ufffe\004\ufffe\001" +
    "\002\000\006\025\020\054\017\001\002\000\004\025\202" +
    "\001\002\000\020\011\024\021\042\027\030\035\035\036" +
    "\027\054\031\055\043\001\002\000\056\002\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\030\uffee" +
    "\031\uffee\034\uffee\037\uffee\040\uffee\041\uffee\042\uffee\051" +
    "\uffee\001\002\000\014\027\030\035\035\036\027\054\031" +
    "\055\043\001\002\000\052\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\012\164\013\165\014\170\015\171" +
    "\016\167\017\172\030\ufff2\031\ufff2\034\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\051\ufff2\001\002\000\014\027\uffb6" +
    "\035\uffb6\036\uffb6\054\uffb6\055\uffb6\001\002\000\072\002" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\051" +
    "\uffdd\052\uffdd\001\002\000\062\002\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\030\uffeb\031\uffeb\034\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\051\uffeb\001\002\000\020\011\024\021\042\027\030" +
    "\035\035\036\027\054\031\055\043\001\002\000\020\011" +
    "\024\021\042\027\030\035\035\036\027\054\031\055\043" +
    "\001\002\000\074\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\026\115\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\051\uffc5\052\uffc5\001\002\000" +
    "\066\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\051" +
    "\uffe2\001\002\000\066\002\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\051\uffe4\001\002\000\062\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\030\uffe9\031\uffe9\034\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\051\uffe9\001\002\000\066\002\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\051\uffc4\001\002\000\036" +
    "\002\ufff4\004\ufff4\005\ufff4\006\052\007\053\010\051\030" +
    "\ufff4\031\ufff4\034\ufff4\037\ufff4\040\ufff4\041\ufff4\042\050" +
    "\051\ufff4\001\002\000\026\002\ufff5\004\ufff5\005\ufff5\030" +
    "\ufff5\031\ufff5\034\ufff5\037\ufff5\040\ufff5\041\ufff5\051\ufff5" +
    "\001\002\000\066\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\051\uffe0\001\002\000\010\002\ufffa\004\ufffa\005" +
    "\ufffa\001\002\000\014\027\uffb7\035\uffb7\036\uffb7\054\uffb7" +
    "\055\uffb7\001\002\000\066\002\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\051\uffc3\001\002\000\066\002\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\051\uffe3\001\002\000" +
    "\010\002\ufff6\004\ufff6\005\016\001\002\000\006\002\ufff9" +
    "\004\ufff9\001\002\000\020\011\024\021\042\027\030\035" +
    "\035\036\027\054\031\055\043\001\002\000\020\011\uffb2" +
    "\021\uffb2\027\uffb2\035\uffb2\036\uffb2\054\uffb2\055\uffb2\001" +
    "\002\000\020\011\uffb5\021\uffb5\027\uffb5\035\uffb5\036\uffb5" +
    "\054\uffb5\055\uffb5\001\002\000\020\011\uffb4\021\uffb4\027" +
    "\uffb4\035\uffb4\036\uffb4\054\uffb4\055\uffb4\001\002\000\020" +
    "\011\uffb3\021\uffb3\027\uffb3\035\uffb3\036\uffb3\054\uffb3\055" +
    "\uffb3\001\002\000\026\002\ufff3\004\ufff3\005\ufff3\030\ufff3" +
    "\031\ufff3\034\ufff3\037\ufff3\040\ufff3\041\ufff3\051\ufff3\001" +
    "\002\000\066\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\030\uffe8\031\uffe8" +
    "\032\056\033\057\034\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\051\uffe8\001\002\000\020\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\053\uffe6\001\002\000\004\054" +
    "\031\001\002\000\066\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\051\uffe7\001\002\000\020\043\072\044\064" +
    "\045\065\046\066\047\071\050\067\053\062\001\002\000" +
    "\072\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\051\uffc2\052\uffc2\001\002\000\066\002\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\051\uffe5\001\002\000\072" +
    "\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\051\uffc0\052\uffc0\001\002\000\072\002\uffbf\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\051\uffbf\052\uffbf\001" +
    "\002\000\072\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\051\uffbc\052\uffbc\001\002\000\072\002\uffbe" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\051\uffbe" +
    "\052\uffbe\001\002\000\072\002\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\051\uffd9\052\074\001\002\000" +
    "\072\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\051\uffbd\052\uffbd\001\002\000\072\002\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\051\uffc1\052\uffc1" +
    "\001\002\000\070\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\027\107\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\051\uffd7\001\002\000\020\011\024\021" +
    "\042\027\030\035\035\036\027\054\031\055\043\001\002" +
    "\000\070\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\051\uffda\001\002\000\004\051\104\001\002\000" +
    "\006\031\100\051\uffd1\001\002\000\020\011\024\021\042" +
    "\027\030\035\035\036\027\054\031\055\043\001\002\000" +
    "\004\051\uffd3\001\002\000\006\031\100\051\uffd1\001\002" +
    "\000\004\051\uffd2\001\002\000\070\002\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\051\uffdb\001\002\000" +
    "\066\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\037\uffde\040\uffde\041\uffde\042\uffde\051" +
    "\uffde\001\002\000\066\002\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\051\uffd8\001\002\000\022\011\024\021\042" +
    "\027\030\030\110\035\035\036\027\054\112\055\043\001" +
    "\002\000\066\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\051\uffd4\001\002\000\020\011\024\021\042\027\030" +
    "\035\035\036\027\054\031\055\043\001\002\000\062\006" +
    "\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffd0\025\uffd0\026\115\027\uffc5\030\uffc5\031\uffd0\032\uffc5" +
    "\033\uffc5\034\uffd0\042\uffc5\052\uffc5\001\002\000\004\030" +
    "\114\001\002\000\066\002\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\051\uffd5\001\002\000\004\054\140\001\002" +
    "\000\072\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\051\uffc7\052\uffc7\001\002\000\012\024\uffca\025" +
    "\uffca\031\120\034\uffca\001\002\000\004\054\136\001\002" +
    "\000\010\024\122\025\123\034\uffcc\001\002\000\004\054" +
    "\127\001\002\000\004\054\126\001\002\000\004\034\125" +
    "\001\002\000\020\011\uffcf\021\uffcf\027\uffcf\035\uffcf\036" +
    "\uffcf\054\uffcf\055\uffcf\001\002\000\004\034\uffcd\001\002" +
    "\000\004\025\130\001\002\000\004\054\031\001\002\000" +
    "\004\016\uffc8\001\002\000\004\016\uffc9\001\002\000\004" +
    "\016\134\001\002\000\020\011\024\021\042\027\030\035" +
    "\035\036\027\054\031\055\043\001\002\000\004\034\uffce" +
    "\001\002\000\012\024\uffca\025\uffca\031\120\034\uffca\001" +
    "\002\000\010\024\uffcb\025\uffcb\034\uffcb\001\002\000\074" +
    "\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\026\115\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\051\uffc5\052\uffc5\001\002\000\072\002\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\051\uffc6\052" +
    "\uffc6\001\002\000\004\030\143\001\002\000\066\002\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\051\uffd6\001\002" +
    "\000\004\030\145\001\002\000\066\002\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\051\uffe1\001\002\000\004\037" +
    "\147\001\002\000\020\011\024\021\042\027\030\035\035" +
    "\036\027\054\031\055\043\001\002\000\004\040\151\001" +
    "\002\000\020\011\024\021\042\027\030\035\035\036\027" +
    "\054\031\055\043\001\002\000\004\041\153\001\002\000" +
    "\066\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\051" +
    "\uffdf\001\002\000\062\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\155\023\157\030\uffed" +
    "\031\uffed\034\uffed\037\uffed\040\uffed\041\uffed\042\uffed\051" +
    "\uffed\001\002\000\020\011\uffb9\021\uffb9\027\uffb9\035\uffb9" +
    "\036\uffb9\054\uffb9\055\uffb9\001\002\000\020\011\024\021" +
    "\042\027\030\035\035\036\027\054\031\055\043\001\002" +
    "\000\020\011\uffb8\021\uffb8\027\uffb8\035\uffb8\036\uffb8\054" +
    "\uffb8\055\uffb8\001\002\000\062\002\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\030\uffec\031\uffec\034\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\051\uffec\001\002\000\072\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\051\uffd9\052\074\001\002" +
    "\000\070\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\027\107\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\051\uffd7\001\002\000\066\002\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\051\uffdc\001\002\000\020\011" +
    "\uffaf\021\uffaf\027\uffaf\035\uffaf\036\uffaf\054\uffaf\055\uffaf" +
    "\001\002\000\020\011\uffb0\021\uffb0\027\uffb0\035\uffb0\036" +
    "\uffb0\054\uffb0\055\uffb0\001\002\000\020\011\024\021\042" +
    "\027\030\035\035\036\027\054\031\055\043\001\002\000" +
    "\020\011\uffb1\021\uffb1\027\uffb1\035\uffb1\036\uffb1\054\uffb1" +
    "\055\uffb1\001\002\000\020\011\uffad\021\uffad\027\uffad\035" +
    "\uffad\036\uffad\054\uffad\055\uffad\001\002\000\020\011\uffae" +
    "\021\uffae\027\uffae\035\uffae\036\uffae\054\uffae\055\uffae\001" +
    "\002\000\020\011\uffac\021\uffac\027\uffac\035\uffac\036\uffac" +
    "\054\uffac\055\uffac\001\002\000\036\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\030\ufff1\031\ufff1\034\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\051\ufff1\001\002\000" +
    "\062\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\030\uffea\031\uffea\034\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\051\uffea\001\002\000" +
    "\056\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\176\021\177\030\ufff0\031\ufff0\034\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\051\ufff0\001\002\000\020\011\uffbb\021" +
    "\uffbb\027\uffbb\035\uffbb\036\uffbb\054\uffbb\055\uffbb\001\002" +
    "\000\020\011\uffba\021\uffba\027\uffba\035\uffba\036\uffba\054" +
    "\uffba\055\uffba\001\002\000\020\011\024\021\042\027\030" +
    "\035\035\036\027\054\031\055\043\001\002\000\056\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\030\uffef\031\uffef\034\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\051\uffef\001\002\000\020\011\024\021\042\027" +
    "\030\035\035\036\027\054\031\055\043\001\002\000\010" +
    "\002\ufff8\004\ufff8\005\ufff8\001\002\000\010\002\ufff6\004" +
    "\ufff6\005\016\001\002\000\006\002\ufff7\004\ufff7\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\004\007\014\001\001\000\010\002\013" +
    "\003\005\004\004\001\001\000\004\005\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\040\010\032\011\043" +
    "\012\036\015\035\016\022\017\020\020\025\025\021\026" +
    "\033\030\031\031\037\032\024\001\001\000\004\023\174" +
    "\001\001\000\016\010\032\011\043\026\173\030\031\031" +
    "\037\032\024\001\001\000\004\014\165\001\001\000\002" +
    "\001\001\000\004\054\160\001\001\000\004\024\153\001" +
    "\001\000\034\006\145\010\032\011\043\012\036\015\035" +
    "\016\022\017\020\020\025\025\021\026\033\030\031\031" +
    "\037\032\024\001\001\000\034\006\143\010\032\011\043" +
    "\012\036\015\035\016\022\017\020\020\025\025\021\026" +
    "\033\030\031\031\037\032\024\001\001\000\004\044\115" +
    "\001\001\000\002\001\001\000\004\027\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\045\001\001\000\002\001\001\000\032\010" +
    "\032\011\043\012\053\015\035\016\022\017\020\020\025" +
    "\025\021\026\033\030\031\031\037\032\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\060\001\001\000\006\030\057\032\024\001\001\000\002" +
    "\001\001\000\006\045\067\047\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\046\074\050" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\105\034\104\001\001\000\036\006\076\010\032\011" +
    "\043\012\036\015\035\016\022\017\020\020\025\025\021" +
    "\026\033\030\031\031\037\032\024\037\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\100\001\001" +
    "\000\034\006\101\010\032\011\043\012\036\015\035\016" +
    "\022\017\020\020\025\025\021\026\033\030\031\031\037" +
    "\032\024\001\001\000\002\001\001\000\004\035\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\006\112\010\032\011\043\012" +
    "\036\015\035\016\022\017\020\020\025\025\021\026\033" +
    "\030\031\031\037\032\024\036\110\001\001\000\002\001" +
    "\001\000\034\006\141\010\032\011\043\012\036\015\035" +
    "\016\022\017\020\020\025\025\021\026\033\030\031\031" +
    "\037\032\024\001\001\000\006\044\115\055\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\120\001\001\000\002\001\001" +
    "\000\004\041\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\130\042\132\043\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\134\010\032\011\043\012\036\015\035\016" +
    "\022\017\020\020\025\025\021\026\033\030\031\031\037" +
    "\032\024\001\001\000\002\001\001\000\004\040\136\001" +
    "\001\000\002\001\001\000\004\044\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\147" +
    "\010\032\011\043\012\036\015\035\016\022\017\020\020" +
    "\025\025\021\026\033\030\031\031\037\032\024\001\001" +
    "\000\002\001\001\000\034\006\151\010\032\011\043\012" +
    "\036\015\035\016\022\017\020\020\025\025\021\026\033" +
    "\030\031\031\037\032\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\155\001\001\000\002\001\001" +
    "\000\022\010\032\011\043\020\157\025\021\026\033\030" +
    "\031\031\037\032\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\046\074\050\161\001\001\000\006\033" +
    "\105\034\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\010\032\011\043\016\172\017" +
    "\020\020\025\025\021\026\033\030\031\031\037\032\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\032\011\043\017\200\020\025\025\021" +
    "\026\033\030\031\031\037\032\024\001\001\000\002\001" +
    "\001\000\034\006\202\010\032\011\043\012\036\015\035" +
    "\016\022\017\020\020\025\025\021\026\033\030\031\031" +
    "\037\032\024\001\001\000\004\052\203\001\001\000\004" +
    "\007\204\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OCLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OCLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OCLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$OCLParser$actions {
  private final OCLParser parser;

  /** Constructor */
  CUP$OCLParser$actions(OCLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$OCLParser$do_action(
    int                        CUP$OCLParser$act_num,
    java_cup.runtime.lr_parser CUP$OCLParser$parser,
    java.util.Stack            CUP$OCLParser$stack,
    int                        CUP$OCLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OCLParser$result;

      /* select the action based on the action number */
      switch (CUP$OCLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OperadorRelacional ::= NEQUAL 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OperadorRelacional ::= LE 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OperadorRelacional ::= GE 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OperadorRelacional ::= LT 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadorRelacional ::= GT 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OperadorRelacional ::= EQUAL 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",10, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadorLogico ::= IMPLIES 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",9, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OperadorLogico ::= XOR 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",9, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadorLogico ::= OR 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",9, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadorLogico ::= AND 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",9, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperadorUnario ::= NOT 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",19, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OperadorUnario ::= MINUS 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",19, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OperadorMulti ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",16, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OperadorMulti ::= MULT 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorMulti",16, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OperadorMais ::= MINUS 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorMais",15, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OperadorMais ::= PLUS 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorMais",15, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OperadorColecao ::= FORALL 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OperadorColecao ::= SELECT 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OperadorColecao ::= EXISTS 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OperadorColecao ::= EXCLUDES 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OperadorColecao ::= INCLUDES 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OperadorColecao ::= SIZE 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OperadorColecao ::= INCLUDESALL 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OperadorColecao",35, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Literal ::= NUMERO 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Literal ::= STRING 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("Literal",7, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CaminhoAux ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",34, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CaminhoAux ::= DCOLON ID CaminhoAux 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CaminhoAux",34, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Caminho ::= ID CaminhoAux 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("Caminho",24, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EspecificadorTipoSimples ::= Caminho 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoSimples",33, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EspecificadorTipo ::= EspecificadorTipoSimples 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipo",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DeclaradorAux ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",30, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DeclaradorAux ::= COMMA ID DeclaradorAux 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("DeclaradorAux",30, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EspecificadorTipoOpt ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EspecificadorTipoOpt ::= COLON ID 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EspecificadorTipoOpt ::= SEMICOL ID COLON EspecificadorTipo EQUAL ExpOcl 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("EspecificadorTipoOpt",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Declarador ::= ID NT$4 DeclaradorAux EspecificadorTipoOpt BAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("Declarador",28, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.println("ID");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListaParametrosOpt ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ListaParametrosOpt",27, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListaParametrosOpt ::= COMMA ExpOcl ListaParametrosOpt 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ListaParametrosOpt",27, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListaParametros ::= ExpOcl ListaParametrosOpt 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ListaParametros",29, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParametrosChamadaPropriedade ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParametrosChamadaPropriedade ::= LPAREN ExpOcl RPAREN 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ParametrosChamadaPropriedade ::= LPAREN Declarador ExpOcl RPAREN 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedade",25, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParametrosChamadaPropriedadeOpt ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",26, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ParametrosChamadaPropriedadeOpt",26, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // QualificadoresOpt ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("QualificadoresOpt",38, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // QualificadoresOpt ::= Qualificadores 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("QualificadoresOpt",38, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Qualificadores ::= LCOL ListaParametros RCOL 
            {
              Object RESULT =null;
		System.out.println("Qualificadores");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("Qualificadores",36, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ChamadaPropriedade ::= Caminho NT$3 QualificadoresOpt ParametrosChamadaPropriedadeOpt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedade",22, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$3 ::= 
            {
              Object RESULT =null;
System.out.println("Path");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ChamadaPropriedadeColecao ::= OperadorColecao QualificadoresOpt ParametrosChamadaPropriedadeOpt 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ChamadaPropriedadeColecao",37, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpressaoIf ::= IF ExpOcl THEN ExpOcl ELSE ExpOcl ENDIF 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpressaoIf",23, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExpPrimaria ::= ExpressaoIf 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ExpPrimaria ::= LPAREN ExpOcl RPAREN 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ExpPrimaria ::= ChamadaPropriedade 
            {
              Object RESULT =null;
		System.out.println("PropertyCall");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExpPrimaria ::= Literal 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",6, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExpPosFixadaAux ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",21, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExpPosFixadaAux ::= ExpPosFixadaAux RARROW NT$2 ChamadaPropriedadeColecao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		System.out.println("postfix->propertycollectioncall");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",21, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
System.out.println("postfix->");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExpPosFixadaAux ::= ExpPosFixadaAux DOT ChamadaPropriedade 
            {
              Object RESULT =null;
		System.out.println("postfix.propertycall");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpPosFixadaAux",21, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExpPosFixada ::= ExpPrimaria ExpPosFixadaAux 
            {
              Object RESULT =null;
		System.out.println("Exp UNARIA");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpPosFixada",20, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExpUnaria ::= ExpPosFixada 
            {
              Object RESULT =null;
		System.out.println(" ExpressaoPostfix ");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",14, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExpUnaria ::= OperadorUnario ExpPosFixada 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",14, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ExpMultiAux ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",18, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExpMultiAux ::= ExpMultiAux OperadorMulti ExpUnaria 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpMultiAux",18, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ExpMultiplicativa ::= ExpUnaria ExpMultiAux 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",13, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExpAditivaAux ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",17, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ExpAditivaAux ::= ExpAditivaAux OperadorMais ExpMultiplicativa 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpAditivaAux",17, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ExpAditiva ::= ExpMultiplicativa ExpAditivaAux 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",12, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ExpRelacional ::= ExpAditiva OperadorRelacional ExpAditiva 
            {
              Object RESULT =null;
		System.out.println(" ExpAditiva < ExpAditiva ");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",11, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ExpRelacional ::= ExpAditiva 
            {
              Object RESULT =null;
		System.out.println(" ExpAditiva ");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",11, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExpLogica ::= ExpRelacional OperadorLogico ExpLogica 
            {
              Object RESULT =null;
		System.out.println(" ExpressaoLogica ");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExpLogica ::= ExpRelacional 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpLogica",8, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ExpOcl ::= ExpLogica 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpOcl",4, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InvContext ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("InvContext",5, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InvContext ::= INV ID COLON ExpOcl NT$1 InvContext 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("InvContext",5, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println(" invariante ");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InvContext ::= INV COLON ExpOcl NT$0 InvContext 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("InvContext",5, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println(" invariante ");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassifierContexto ::= ID COLON ID 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassifierContexto ::= ID 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ClassifierContexto",3, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclaracaoContexto ::= CONTEXT ClassifierContexto 
            {
              Object RESULT =null;
		System.out.println(" DeclaracaoContexto ");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("DeclaracaoContexto",2, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Restricao ::= DeclaracaoContexto InvContext 
            {
              Object RESULT =null;
		System.out.println(" Restricao ");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("Restricao",1, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ExpressoesOcl ::= 
            {
              Object RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ExpressoesOcl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		RESULT = start_val;
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OCLParser$parser.done_parsing();
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ExpressoesOcl ::= Restricao ExpressoesOcl 
            {
              Object RESULT =null;
		System.out.println("casei");
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ExpressoesOcl",0, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

