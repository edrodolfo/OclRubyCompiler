package compil.inv.parser;

import java_cup.runtime.*;
import compil.inv.semantica.Exp;

parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */

terminal		CONTEXT, INV, OR, XOR, AND, NOT, LT, GT, LE, GE, EQUAL, NEQUAL,
				PLUS, MINUS, MULT, DIVIDE, SEMICOL, COLON, DCOLON,
				LPAREN, RPAREN, COMMA, RARROW,DOT, BAR,
				STRING, IF, THEN, ELSE, ENDIF, IMPLIES,SIZE,INCLUDES,EXCLUDES,FORALL,SELECT,EXISTS,
				RCOL,LCOL,INCLUDESALL;

terminal String ID;
terminal Number NUMERO;

non terminal Exp ExpressoesOcl, Restricao, DeclaracaoContexto,ClassifierContexto;
non terminal Exp ExpOcl, InvContext, ExpPrimaria, Literal;
non terminal Exp ExpLogica, OperadorLogico, OperadorRelacional, ExpRelacional;
non terminal Exp ExpAditiva, ExpMultiplicativa, ExpUnaria, OperadorMais,OperadorMulti;
non terminal Exp ExpAditivaAux, ExpMultiAux; 
non terminal Exp OperadorUnario, ExpPosFixada, ExpPosFixadaAux;
non terminal Exp ChamadaPropriedade, ExpressaoIf, Caminho;
non terminal Exp ParametrosChamadaPropriedade, ParametrosChamadaPropriedadeOpt;
non terminal Exp ListaParametrosOpt, Declarador, ListaParametros, DeclaradorAux;
non terminal Exp EspecificadorTipoOpt, EspecificadorTipo, EspecificadorTipoSimples, CaminhoAux;
non terminal Exp OperadorColecao,Qualificadores,ChamadaPropriedadeColecao,QualificadoresOpt;

ExpressoesOcl ::= Restricao ExpressoesOcl {:System.out.println("casei");:}
				| ;

Restricao     ::= DeclaracaoContexto InvContext {:System.out.println(" Restricao ");:};

DeclaracaoContexto ::= CONTEXT ClassifierContexto {:System.out.println(" DeclaracaoContexto ");:}; 

ClassifierContexto ::= ID | ID COLON ID | ID DCOLON ID ;

InvContext	::= INV COLON ExpOcl {:System.out.println(" invariante ");:} InvContext 
				| 
				INV ID COLON ExpOcl {:System.out.println(" invariante ");:} InvContext 
				| ;

ExpOcl ::= ExpLogica:e {: RESULT = Exp.checkType(e, "Boolean"); :};

ExpLogica ::= ExpRelacional:e {: RESULT = Exp.checkType(e, "Boolean"); :}
              |
              ExpRelacional:er OperadorLogico ExpLogica:el {: RESULT = Exp.checkSameType(er, el, "Boolean"); System.out.println(" ExpressaoLogica ");:}
              ;

ExpRelacional ::= ExpAditiva:e {: RESULT = e; System.out.println(" ExpAditiva ");:}
				  |
				  ExpAditiva:e1 OperadorRelacional ExpAditiva:e2 {: RESULT = Exp.checkSameType(e1, e2, "Boolean"); System.out.println(" ExpAditiva < ExpAditiva ");:}
				  ;


ExpAditiva ::= ExpMultiplicativa:e1 ExpAditivaAux:e2 {: RESULT = Exp.checkSameType(e1, e2, e1.type);; :}; /*ID | NUMERO;*/

ExpAditivaAux ::= ExpAditivaAux:e1 OperadorMais ExpMultiplicativa:e2 {: Exp.checkType(e1, e2, "Number"); :}
					|  ;

ExpMultiplicativa ::= ExpUnaria:e1 ExpMultiAux:e2  {: RESULT = Exp.checkSameType(e1, e2, e1.type); :};


ExpMultiAux ::= ExpMultiAux:e1 OperadorMulti ExpUnaria:e2 {: Exp.checkType(e1, e2, "Number"); :}
					|  ;

ExpUnaria ::= OperadorUnario:e1 ExpPosFixada:e2 {: RESULT = Exp.checkSameType(e1, e2, e1.type); :}
				| ExpPosFixada:e {: RESULT = e; System.out.println(" ExpressaoPostfix ");:};

ExpPosFixada ::= ExpPrimaria:e1 ExpPosFixadaAux:e2 {: RESULT = Exp.checkSameType(e1, e2, e1.type); System.out.println("Exp UNARIA");:};

ExpPosFixadaAux ::= ExpPosFixadaAux DOT ChamadaPropriedade {:System.out.println("postfix.propertycall");:}
				    |
				    ExpPosFixadaAux RARROW {:System.out.println("postfix->");:} ChamadaPropriedadeColecao {:System.out.println("postfix->propertycollectioncall");:}
				    |
				    ; 

ExpPrimaria ::= Literal:l {: RESULT = l; :}
				| ChamadaPropriedade {: System.out.println("PropertyCall");:}
				| LPAREN  ExpOcl:e RPAREN {: RESULT = e; :}
				| ExpressaoIf:e {: RESULT = e; :};

ExpressaoIf ::= IF ExpOcl:e1 THEN ExpOcl:e2 ELSE ExpOcl:e3 ENDIF {: RESULT = Exp.ifExpType(e1, e2, e3); :};


ChamadaPropriedadeColecao ::= OperadorColecao QualificadoresOpt ParametrosChamadaPropriedadeOpt ;
							  

ChamadaPropriedade ::= Caminho {:System.out.println("Path");:} QualificadoresOpt ParametrosChamadaPropriedadeOpt                                                                    
                       ;

Qualificadores ::= LCOL ListaParametros RCOL {:System.out.println("Qualificadores");:} ; 

QualificadoresOpt ::= Qualificadores | ;
 
ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade | ; 

ParametrosChamadaPropriedade ::= LPAREN  Declarador ExpOcl RPAREN 	 
								 |
								  LPAREN ExpOcl RPAREN
								 |
								 LPAREN RPAREN
								 ;
 
ListaParametros ::= ExpOcl ListaParametrosOpt ;
ListaParametrosOpt ::= COMMA ExpOcl ListaParametrosOpt | ; 

Declarador ::= ID {:System.out.println("ID");:}DeclaradorAux EspecificadorTipoOpt BAR  ;

EspecificadorTipoOpt ::= SEMICOL ID COLON EspecificadorTipo EQUAL ExpOcl 
                         |
                         COLON ID
                         |
                         ;

DeclaradorAux ::= COMMA ID DeclaradorAux | ;

EspecificadorTipo ::= EspecificadorTipoSimples ;

EspecificadorTipoSimples ::= Caminho ;

Caminho ::= ID CaminhoAux ;

CaminhoAux ::= DCOLON ID CaminhoAux  | ;

Literal ::= STRING {:RESULT = new Exp("String");:}
			| NUMERO {:RESULT = new Exp("Numero");:} ;


OperadorColecao ::= INCLUDESALL | SIZE | INCLUDES | EXCLUDES | EXISTS | SELECT | FORALL ;
OperadorMais ::= PLUS | MINUS ;
OperadorMulti ::= MULT | DIVIDE ;
OperadorUnario ::= MINUS | NOT ;
OperadorLogico ::= AND | OR | XOR | IMPLIES ;
OperadorRelacional ::= EQUAL | GT | LT | GE | LE | NEQUAL ;