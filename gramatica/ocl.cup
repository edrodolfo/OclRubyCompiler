package compil.inv.parser;

import java_cup.runtime.*;

parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */

terminal		CONTEXT, INV, OR, XOR, AND, NOT, LT, GT, LE, GE, EQUAL, NEQUAL,
				PLUS, MINUS, MULT, DIVIDE, SEMICOL, COLON, DCOLON,
				LPAREN, RPAREN, COMMA, RARROW,DOT, BAR,
				STRING, IF, THEN, ELSE, ENDIF, IMPLIES,SIZE,INCLUDES,EXCLUDES,FORALL,SELECT,EXISTS,
				RCOL,LCOL,INCLUDESALL;

terminal String ID;
terminal Integer   NUMERO;

non terminal Object ExpressoesOcl, Restricao, DeclaracaoContexto,ClassifierContexto;
non terminal Object ExpOcl, InvContext, ExpPrimaria, Literal;
non terminal Object ExpLogica, OperadorLogico, OperadorRelacional, ExpRelacional;
non terminal Object ExpAditiva, ExpMultiplicativa, ExpUnaria, OperadorMais,OperadorMulti;
non terminal Object ExpAditivaAux, ExpMultiAux; 
non terminal Object OperadorUnario, ExpPosFixada, ExpPosFixadaAux;
non terminal Object ChamadaPropriedade, ExpressaoIf, Caminho;
non terminal Object ParametrosChamadaPropriedade, ParametrosChamadaPropriedadeOpt;
non terminal Object ListaParametrosOpt, Declarador, ListaParametros, DeclaradorAux;
non terminal Object EspecificadorTipoOpt, EspecificadorTipo, EspecificadorTipoSimples, CaminhoAux;
non terminal Object OperadorColecao,Qualificadores,ChamadaPropriedadeColecao,QualificadoresOpt;

ExpressoesOcl ::= Restricao ExpressoesOcl {:System.out.println("casei");:}| ;

Restricao     ::= DeclaracaoContexto InvContext {:System.out.println(" Restricao ");:};

DeclaracaoContexto ::= CONTEXT ClassifierContexto {:System.out.println(" DeclaracaoContexto ");:}; 

ClassifierContexto ::= ID | ID COLON ID ;

InvContext	::= INV COLON ExpOcl {:System.out.println(" invariante ");:} InvContext 
				| 
				INV ID COLON ExpOcl {:System.out.println(" invariante ");:} InvContext 
				| ;

ExpOcl ::= ExpLogica ;

ExpLogica ::= ExpRelacional 
              |
              ExpRelacional OperadorLogico ExpLogica {:System.out.println(" ExpressaoLogica ");:}
              ;

ExpRelacional ::= ExpAditiva {:System.out.println(" ExpAditiva ");:}
				  |
				  ExpAditiva OperadorRelacional ExpAditiva {:System.out.println(" ExpAditiva < ExpAditiva ");:}
				  ;


ExpAditiva ::= ExpMultiplicativa ExpAditivaAux ; /*ID | NUMERO;*/

ExpAditivaAux ::= ExpAditivaAux OperadorMais ExpMultiplicativa |  ;

ExpMultiplicativa ::= ExpUnaria ExpMultiAux ;


ExpMultiAux ::= ExpMultiAux OperadorMulti ExpUnaria |  ;

ExpUnaria ::= OperadorUnario ExpPosFixada | ExpPosFixada {:System.out.println(" ExpressaoPostfix ");:};

ExpPosFixada ::= ExpPrimaria ExpPosFixadaAux {:System.out.println("Exp UNARIA");:};

ExpPosFixadaAux ::= ExpPosFixadaAux DOT ChamadaPropriedade {:System.out.println("postfix.propertycall");:}
				    |
				    ExpPosFixadaAux RARROW {:System.out.println("postfix->");:} ChamadaPropriedadeColecao {:System.out.println("postfix->propertycollectioncall");:}
				    |
				    ; 

ExpPrimaria ::= Literal | ChamadaPropriedade {:System.out.println("PropertyCall");:}| LPAREN  ExpOcl RPAREN 
					| ExpressaoIf ;

ExpressaoIf ::= IF ExpOcl THEN ExpOcl ELSE ExpOcl ENDIF ;



ChamadaPropriedadeColecao ::= OperadorColecao QualificadoresOpt ParametrosChamadaPropriedadeOpt 
								;
							  

ChamadaPropriedade ::= Caminho {:System.out.println("Path");:} QualificadoresOpt ParametrosChamadaPropriedadeOpt                                                                    
                       ;

Qualificadores ::= LCOL ListaParametros RCOL {:System.out.println("Qualificadores");:} ; 

QualificadoresOpt ::= Qualificadores | ;
 
ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade | ; 

ParametrosChamadaPropriedade ::= LPAREN  Declarador ExpOcl RPAREN 	 
								 |
								  LPAREN ExpOcl RPAREN
								 |
								 LPAREN RPAREN
								 ;
 
ListaParametros ::= ExpOcl ListaParametrosOpt ;
ListaParametrosOpt ::= COMMA ExpOcl ListaParametrosOpt | ; 

Declarador ::= ID {:System.out.println("ID");:}DeclaradorAux EspecificadorTipoOpt BAR  ;

EspecificadorTipoOpt ::= SEMICOL ID COLON EspecificadorTipo EQUAL ExpOcl 
                         |
                         COLON ID
                         |
                          ;

DeclaradorAux ::= COMMA ID DeclaradorAux | ;

EspecificadorTipo ::= EspecificadorTipoSimples ;

EspecificadorTipoSimples ::= Caminho ;

Caminho ::= ID CaminhoAux ;

CaminhoAux ::= DCOLON ID CaminhoAux | ;

Literal ::= STRING | NUMERO ;


OperadorColecao ::= INCLUDESALL | SIZE | INCLUDES | EXCLUDES | EXISTS | SELECT | FORALL ;
OperadorMais ::= PLUS | MINUS ;
OperadorMulti ::= MULT | DIVIDE ;
OperadorUnario ::= MINUS | NOT ;
OperadorLogico ::= AND | OR | XOR | IMPLIES ;
OperadorRelacional ::= EQUAL | GT | LT | GE | LE | NEQUAL ;