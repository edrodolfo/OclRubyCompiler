package compil.inv.parser;

import java_cup.runtime.*;

parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */

terminal		CONTEXT, INV, OR, XOR, AND, NOT, LT, GT, LE, GE, EQUAL, NEQUAL,
				PLUS, MINUS, MULT, DIVIDE, SEMICOL, COLON, DCOLON,
				LPAREN, RPAREN, COMMA, RARROW,DOT, BAR,
				STRING, IF, THEN, ELSE, ENDIF, IMPLIES;

terminal String ID;
terminal Integer   NUMERO;

non terminal Object ExpressoesOcl, Restricao, DeclaracaoContexto,ClassifierContexto;
non terminal Object ExpOcl, InvContext, ExpPrimaria, Literal;
non terminal Object ExpLogica, OperadorLogico, OperadorRelacional, ExpRelacional;
non terminal Object ExpAditiva, ExpMultiplicativa, ExpUnaria, OperadorMais,OperadorMulti;
non terminal Object ExpLogicaAux, ExpRelacionalAux, ExpAditivaAux, ExpMultiAux; 
non terminal Object OperadorUnario, ExpPosFixada, ExpPosFixadaAux, DotOrArrow;
non terminal Object ChamadaPropriedade, ExpressaoIf, Caminho;
non terminal Object ParametrosChamadaPropriedade, ParametrosChamadaPropriedadeOpt;
non terminal Object DeclaradorOpt, ListaParametrosOpt, Declarador, ListaParametros, DeclaradorAux;
non terminal Object EspecificadorTipoOpt, EspecificadorTipo, EspecificadorTipoSimples, CaminhoAux;

ExpressoesOcl ::= Restricao ExpressoesOcl {:System.out.println("casei");:}| ;

Restricao     ::= DeclaracaoContexto InvContext {:System.out.println(" Restricao ");:};

DeclaracaoContexto ::= CONTEXT ClassifierContexto {:System.out.println(" DeclaracaoContexto ");:}; 

ClassifierContexto ::= ID | ID COLON ID ;

InvContext	::= INV COLON ExpOcl {:System.out.println(" invariante ");:} InvContext 
				| 
				INV ID COLON ExpOcl {:System.out.println(" invariante ");:} InvContext 
				| ;

/*ExpOcl ::= ExpLogica {:System.out.println(" ExpressaoOcl ");:};*/
ExpOcl ::= ExpLogica ;

ExpLogica ::= ExpRelacional ExpLogicaAux {:System.out.println(" ExpressaoLogica ");:};

ExpLogicaAux ::= | OperadorLogico ExpRelacional ExpLogicaAux  ;

ExpRelacional ::= ExpAditiva ExpRelacionalAux {:System.out.println(" ExpressaoRelacional ");:};

ExpRelacionalAux ::= | OperadorRelacional ExpAditiva ExpRelacionalAux  ;

ExpAditiva ::= ExpMultiplicativa ExpAditivaAux {:System.out.println(" ExpressaoAditiva ");:};

ExpAditivaAux ::= | OperadorMais ExpMultiplicativa ExpAditivaAux  ;

ExpMultiplicativa ::= ExpUnaria ExpMultiAux {:System.out.println(" ExpressaoMulti ");:};

ExpMultiAux ::= | OperadorMulti ExpUnaria ExpMultiAux ;

ExpUnaria ::= OperadorUnario ExpPosFixada | ExpPosFixada {:System.out.println(" ExpressaoPostfix ");:};

ExpPosFixada ::= ExpPrimaria ExpPosFixadaAux ;

ExpPosFixadaAux ::= DotOrArrow ChamadaPropriedade ExpPosFixadaAux | ;

DotOrArrow ::= DOT | RARROW ;

ExpPrimaria ::= Literal | ChamadaPropriedade | LPAREN  ExpOcl RPAREN 
					| ExpressaoIf ;

ExpressaoIf ::= IF ExpOcl THEN ExpOcl ELSE ExpOcl ENDIF ;

ChamadaPropriedade ::= Caminho ParametrosChamadaPropriedadeOpt ;

ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade | ;

ParametrosChamadaPropriedade ::= LPAREN DeclaradorOpt ListaParametrosOpt RPAREN ;

DeclaradorOpt ::= Declarador | ;

ListaParametrosOpt ::= ListaParametros | ;

Declarador ::= ID DeclaradorAux EspecificadorTipoOpt BAR ;

EspecificadorTipoOpt ::= SEMICOL ID COLON EspecificadorTipo EQUAL ExpOcl | ;

DeclaradorAux ::= COMMA ID DeclaradorAux ;

EspecificadorTipo ::= EspecificadorTipoSimples ;

EspecificadorTipoSimples ::= Caminho ;

Caminho ::= ID CaminhoAux ;

CaminhoAux ::= DCOLON ID CaminhoAux ;

Literal ::= STRING | NUMERO ;

OperadorMais ::= PLUS | MINUS ;
OperadorMulti ::= MULT | DIVIDE ;
OperadorUnario ::= MINUS | NOT ;
OperadorLogico ::= AND | OR | XOR | IMPLIES ;
OperadorRelacional ::= EQUAL | GT | LT | GE | LE | NEQUAL ;